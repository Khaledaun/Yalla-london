
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    output          = "./node_modules/@prisma/client"
    binaryTargets   = ["native", "debian-openssl-3.0.x"]
    engineType      = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  // RBAC Extensions
  role          String    @default("viewer") // admin, editor, viewer
  permissions   String[]  @default([]) // Additional specific permissions
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  posts         BlogPost[]
  auditLogs     AuditLog[]
  userSessions  UserSession[]
  topicPolicies TopicPolicy[]
  
  // Premium backend relations
  auditLogsPremium AuditLogPremium[]
  siteMembershipsPremium SiteMemberPremium[]
  
  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verificationtokens")
}

model Category {
  id          String     @id @default(cuid())
  name_en     String
  name_ar     String
  slug        String     @unique
  description_en String?
  description_ar String?
  image_url   String?
  posts       BlogPost[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model BlogPost {
  id           String   @id @default(cuid())
  title_en     String
  title_ar     String
  slug         String   @unique
  excerpt_en   String?
  excerpt_ar   String?
  content_en   String
  content_ar   String
  featured_image String?
  published    Boolean  @default(false)
  category_id  String
  author_id    String
  meta_title_en String?
  meta_title_ar String?
  meta_description_en String?
  meta_description_ar String?
  tags         String[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Phase 4+ Extensions
  page_type                String?  // guide, place, event, list, faq, news, itinerary
  keywords_json            Json?    // Primary + long-tail keywords
  questions_json           Json?    // PAA-style questions
  authority_links_json     Json?    // Authority source links used (3-4 links)
  featured_longtails_json  Json?    // EXACTLY 2 featured long-tails
  seo_score                Int?     // SEO audit score (0-100)
  og_image_id              String?  // Reference to generated OG image
  place_id                 String?  // Reference to Place if location-based
  
  category     Category @relation(fields: [category_id], references: [id])
  author       User     @relation(fields: [author_id], references: [id])
  place        Place?   @relation(fields: [place_id], references: [id])
  
  @@index([page_type])
  @@index([place_id])
  @@index([seo_score])
}

model Recommendation {
  id           String   @id @default(cuid())
  name_en      String
  name_ar      String
  type         String   // hotel, restaurant, attraction
  category     String   // luxury, mid-range, budget
  description_en String
  description_ar String
  address_en   String
  address_ar   String
  phone        String?
  website      String?
  price_range  String?
  rating       Float?
  images       String[]
  features_en  String[]
  features_ar  String[]
  booking_url  String?
  latitude     Float?
  longitude    Float?
  published    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model ContentGeneration {
  id         String   @id @default(cuid())
  prompt     String
  response   String
  type       String   // blog_topic, blog_content, recommendation
  language   String   // en, ar
  used       Boolean  @default(false)
  created_at DateTime @default(now())
}

model ScheduledContent {
  id             String   @id @default(cuid())
  title          String
  content        String   @db.Text
  content_type   String   // blog_post, instagram_post, tiktok_video
  language       String   // en, ar
  category       String?
  tags           String[]
  metadata       Json?
  scheduled_time DateTime
  published_time DateTime?
  status         String   @default("pending") // pending, published, failed, cancelled
  platform       String?  // blog, instagram, tiktok
  published      Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  // Phase 4+ Extensions
  page_type              String?  // guide, place, event, list, faq, news, itinerary
  topic_proposal_id      String?  // Reference to TopicProposal
  seo_score              Int?     // SEO audit score (0-100)
  generation_source      String?  // manual, topic_proposal, discovery_prompt
  authority_links_used   Json?    // Track which authority links were used
  longtails_used         Json?    // Track which long-tails were used

  topic_proposal TopicProposal? @relation(fields: [topic_proposal_id], references: [id])

  @@index([page_type])
  @@index([topic_proposal_id])
  @@index([seo_score])
  @@index([generation_source])
}

// Phase 3.2 - Social Media Embeds
model SocialEmbed {
  id           String   @id @default(cuid())
  platform     String   // instagram, tiktok, facebook, youtube
  url          String   // Original social media URL
  embed_id     String   // Extracted ID from URL
  thumbnail    String?  // Cloud storage path to thumbnail image
  title        String?
  description  String?
  author       String?
  aspect_ratio String   @default("16:9") // For CLS prevention
  metadata     Json?    // Additional platform-specific data
  status       String   @default("active") // active, archived, error
  usage_count  Int      @default(0) // Track where it's used
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

// Phase 3.3 - Media Library
model MediaAsset {
  id              String   @id @default(cuid())
  filename        String
  original_name   String
  cloud_storage_path String // S3 key - never store local paths
  url             String   // Public URL for serving
  file_type       String   // image, video, document
  mime_type       String
  file_size       Int      // Size in bytes
  width           Int?
  height          Int?
  alt_text        String?
  title           String?
  description     String?
  tags            String[]
  license_info    String?  // Rights/attribution info
  responsive_urls Json?    // Different sizes (WebP, AVIF variants)
  usage_map       Json?    // Track where asset is used
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  homepage_blocks HomepageBlock[]
}

// Phase 3.4 - Homepage Builder
model HomepageBlock {
  id          String   @id @default(cuid())
  type        String   // hero, featured-experiences, events, testimonials, blog-grid, cta
  title_en    String?
  title_ar    String?
  content_en  String?  @db.Text
  content_ar  String?  @db.Text
  config      Json?    // Block-specific configuration
  media_id    String?  // Reference to MediaAsset
  position    Int      // Order on page
  enabled     Boolean  @default(true)
  version     String   @default("draft") // draft, published
  language    String   @default("both") // en, ar, both
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  media       MediaAsset? @relation(fields: [media_id], references: [id])
}

model HomepageVersion {
  id          String   @id @default(cuid())
  version_id  String   @unique
  title       String
  blocks_data Json     // Snapshot of all blocks at this version
  published   Boolean  @default(false)
  created_at  DateTime @default(now())
}

// Phase 3.5 - Database Backups & System
model DatabaseBackup {
  id             String   @id @default(cuid())
  backup_name    String
  backup_size    String   // Human readable size
  cloud_storage_path String // S3 path to backup file
  backup_type    String   // scheduled, manual, pre-migration
  tables_count   Int?
  records_count  Int?
  status         String   // completed, failed, in-progress
  error_message  String?
  created_at     DateTime @default(now())
}

model ApiSettings {
  id         String   @id @default(cuid())
  key_name   String   @unique // openai_api_key, google_analytics_id, etc.
  key_value  String
  is_active  Boolean  @default(true)
  last_tested DateTime?
  test_status String?  // success, failed, not_tested
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ContentScheduleRule {
  id                    String   @id @default(cuid())
  name                  String
  content_type          String   // blog_post, social_post
  language              String   // en, ar, both
  frequency_hours       Int      @default(24) // Generate every X hours
  auto_publish          Boolean  @default(false)
  min_hours_between     Int      @default(6)
  max_posts_per_day     Int      @default(4)
  preferred_times       String[] // ["09:00", "15:00", "21:00"]
  categories            String[] // Categories to generate content for
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

// =============================================================================
// PHASE 4A: DATABASE SCHEMA ADDITIONS
// =============================================================================

// =============================================================================
// PHASE 4B: TOPIC RESEARCH & CONTENT PIPELINE MODELS
// =============================================================================

// Weekly Topic Research with Authority Links & Featured Long-tails  
model TopicProposal {
  id                      String   @id @default(cuid())
  locale                  String   // en, ar
  primary_keyword         String
  longtails               String[] // All long-tail keywords discovered (≥5)
  featured_longtails      String[] // EXACTLY 2 selected for emphasis in articles
  questions               String[] // PAA-style questions
  authority_links_json    Json     // 3-4 items: {url, title, sourceDomain}
  intent                  String   // info, transactional, event
  suggested_page_type     String   // guide, place, event, list, faq, news, itinerary
  suggested_window_start  DateTime?
  suggested_window_end    DateTime?
  source_weights_json     Json     // Citation weights and provenance
  status                  String   @default("proposed") // proposed, approved, snoozed, rejected
  confidence_score        Float?   // 0.0 - 1.0
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  
  // Relations
  scheduled_content       ScheduledContent[]
  
  @@index([locale, status])
  @@index([suggested_window_start, suggested_window_end])
  @@index([status, confidence_score])
}

// Bi-monthly SEO/AEO Rulebook Management
model RulebookVersion {
  id                        String   @id @default(cuid())
  version                   String   @unique // e.g., "2024.09.1"  
  changelog                 String   @db.Text
  weights_json              Json     // SEO scoring weights
  schema_requirements_json  Json     // Required schema per page type
  prompts_json              Json     // Generation prompt templates
  is_active                 Boolean  @default(false)
  created_at                DateTime @default(now())
  
  @@index([is_active])
  @@index([created_at])
}

// Page Type Templates with Required/Optional Blocks
model PageTypeRecipe {
  id                String   @id @default(cuid())
  type              String   @unique // guide, place, event, list, faq, news, itinerary
  required_blocks   String[] // FAQ, Map, KeyFacts, etc.
  optional_blocks   String[] // Gallery, Video, Social, etc.
  schema_plan_json  Json     // Required JSON-LD schemas
  min_word_count    Int      @default(800)
  template_prompts_json Json // Generation prompts per locale
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

// =============================================================================
// PHASE 4F: ENHANCED MEDIA & PLACES MODELS
// =============================================================================

// Enhanced Image Assets (optimized for places & content)
model ImageAsset {
  id               String   @id @default(cuid())
  url              String
  cloud_storage_path String // S3 key - matches your MediaAsset pattern
  width            Int
  height           Int
  attribution      String?
  tags             String[]
  place_id         String?
  alt_text         String?
  title            String?
  responsive_variants_json Json? // Different sizes and formats
  usage_count      Int      @default(0)
  seo_keywords     String[] // SEO-relevant keywords for this image
  auto_assigned    Boolean  @default(false) // Was this auto-assigned?
  created_at       DateTime @default(now())
  
  place            Place?   @relation(fields: [place_id], references: [id])
  
  @@index([place_id])
  @@index([tags])
  @@index([auto_assigned])
}

model VideoAsset {
  id               String   @id @default(cuid())
  url              String
  cloud_storage_path String // S3 key
  duration_sec     Int?
  poster_url       String?
  attribution      String?
  tags             String[]
  place_id         String?
  title            String?
  description      String?
  usage_count      Int      @default(0)
  auto_assigned    Boolean  @default(false)
  created_at       DateTime @default(now())
  
  place            Place?   @relation(fields: [place_id], references: [id])
  
  @@index([place_id])
  @@index([tags])
  @@index([auto_assigned])
}

// Places Database (30 London Places + expansion capability)
model Place {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  category      String   // attraction, restaurant, hotel, stadium, market, etc.
  lat           Float?
  lng           Float?
  address       String?
  official_url  String?
  short_desc    String?
  tags          String[]
  metadata_json Json?    // Additional place-specific data
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  // Relations
  blog_posts    BlogPost[]
  image_assets  ImageAsset[]
  video_assets  VideoAsset[]
  
  @@index([category])
  @@index([tags])
  @@index([slug])
}

// =============================================================================
// PHASE 4E: ANALYTICS & PERFORMANCE TRACKING
// =============================================================================

// Analytics Snapshot Caching (GA4 & GSC data)
model AnalyticsSnapshot {
  id               String   @id @default(cuid())
  site_id          String?  // For future multi-site support
  date_range       String   // 7d, 28d
  data_json        Json     // GA4 & GSC aggregated data
  indexed_pages    Int      @default(0) // From GSC - triggers backlink offers at ≥40
  top_queries      Json     // Top search queries
  performance_metrics Json  // CTR, impressions, etc.
  created_at       DateTime @default(now())
  
  @@index([date_range])
  @@index([created_at])
  @@index([indexed_pages])
}

// SEO Audit Results with Auto-fixes & Internal Link Offers
model SeoAuditResult {
  id                String   @id @default(cuid())
  content_id        String   // BlogPost or ScheduledContent ID
  content_type      String   // blog_post, scheduled_content
  score             Int      // Overall SEO score (0-100)
  breakdown_json    Json     // Detailed scoring breakdown
  suggestions       Json     // Array of suggestions
  quick_fixes       Json     // Auto-applicable fixes
  internal_link_offers Json? // When indexed_pages >= 40
  authority_links_used Json? // Track authority link usage
  longtails_coverage Json?  // Track featured long-tail usage
  audit_version     String   @default("1.0")
  created_at        DateTime @default(now())
  
  @@index([content_id, content_type])
  @@index([score])
  @@index([created_at])
}

// =============================================================================
// PHASE 4G: MULTI-SITE ARCHITECTURE (PREPARATORY)
// =============================================================================

// Multi-Site Support (extends your existing brand system)
model Site {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  theme_id    String?
  settings_json Json   // Site-specific configuration
  logo_url    String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  site_members SiteMember[]
  site_themes  SiteTheme?   @relation(fields: [theme_id], references: [id])
  
  @@index([is_active])
  @@index([slug])
}

model SiteTheme {
  id           String   @id @default(cuid())
  name         String
  tokens_json  Json     // CSS variables and theme tokens (extends your brand system)
  preview_url  String?
  created_at   DateTime @default(now())
  
  // Relations
  sites        Site[]
}

model SiteMember {
  id      String   @id @default(cuid())
  site_id String
  user_id String
  role    String   // OWNER, MANAGER, WORKER, ANALYST
  
  site    Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  
  @@unique([site_id, user_id])
}

// =============================================================================
// ENTERPRISE SECURITY & ANALYTICS EXTENSIONS
// =============================================================================

// Audit Log for enterprise compliance and security
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // login, logout, create, update, delete, access, export
  resource    String?  // table or endpoint accessed
  resourceId  String?  // specific record ID
  details     Json?    // additional context
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([resource])
}

// Enterprise Analytics Events Tracking
model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventName   String
  category    String   @default("engagement")
  label       String?
  value       Float?
  userId      String?
  sessionId   String?
  properties  Json?    // Additional event properties
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  referer     String?
  
  @@index([eventName])
  @@index([category])
  @@index([timestamp])
  @@index([userId])
  @@index([sessionId])
}

// System Performance and Usage Metrics
model SystemMetrics {
  id          String   @id @default(cuid())
  metricName  String
  metricValue Float
  metricUnit  String?  // requests, ms, bytes, percentage
  tags        Json?    // Additional context/dimensions
  timestamp   DateTime @default(now())
  
  @@index([metricName])
  @@index([timestamp])
}

// User Sessions for enhanced security tracking
model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionToken String  @unique
  ipAddress   String?
  userAgent   String?
  lastActivity DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@index([lastActivity])
}

// =============================================================================
// PHASE 4C: UNIFIED BACKEND UX + FEATURE PLAN MODELS
// =============================================================================

// Topic Policy Management (balancer quotas, publishing rules)
model TopicPolicy {
  id                    String   @id @default(cuid())
  site_id               String?  // Multi-tenant scoping
  name                  String
  policy_type           String   // quota_balancer, publishing_rules, content_quality
  rules_json            Json     // Policy-specific rules and thresholds
  quotas_json           Json?    // Daily/weekly content quotas by category
  priorities_json       Json?    // Category priority weights
  auto_approval_rules   Json?    // Auto-approval criteria
  violation_actions     String[] // warn, reject, quarantine, escalate
  is_active             Boolean  @default(true)
  effective_from        DateTime @default(now())
  effective_until       DateTime?
  created_by            String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  user                  User     @relation(fields: [created_by], references: [id])
  
  @@index([site_id])
  @@index([policy_type])
  @@index([is_active])
  @@index([effective_from, effective_until])
}

// CRM Subscriber Management with Double Opt-in
model Subscriber {
  id                    String      @id @default(cuid())
  site_id               String?     // Multi-tenant scoping
  email                 String
  status                SubscriberStatus @default(PENDING)
  source                String?     // exit_intent, newsletter_signup, content_gate
  preferences_json      Json?       // Newsletter preferences, frequency, topics
  metadata_json         Json?       // UTM params, user agent, IP (anonymized)
  double_optin_token    String?     @unique
  double_optin_sent_at  DateTime?
  confirmed_at          DateTime?
  unsubscribed_at       DateTime?
  unsubscribe_reason    String?
  last_campaign_sent    DateTime?
  engagement_score      Float?      // Calculated engagement metrics
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  
  // Relations
  consent_logs          ConsentLog[]
  
  @@unique([site_id, email])
  @@index([site_id])
  @@index([status])
  @@index([source])
  @@index([created_at])
}

enum SubscriberStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

// GDPR/Privacy Consent Logging
model ConsentLog {
  id                String   @id @default(cuid())
  site_id           String?  // Multi-tenant scoping  
  subscriber_id     String
  consent_type      String   // newsletter, analytics, marketing, functional
  consent_version   String   // Consent form version for compliance
  action            String   // granted, withdrawn, updated
  legal_basis       String   // consent, legitimate_interest, contract
  processing_purposes String[] // marketing, analytics, personalization
  data_categories   String[] // email, behavioral, preferences
  consent_text      String?  @db.Text // Actual consent text shown to user
  ip_address        String?  // For audit trail (anonymized after 30 days)
  user_agent        String?
  timestamp         DateTime @default(now())
  
  subscriber        Subscriber @relation(fields: [subscriber_id], references: [id], onDelete: Cascade)
  
  @@index([site_id])
  @@index([subscriber_id])
  @@index([consent_type])
  @@index([action])
  @@index([timestamp])
}

// LLM Provider Management (encrypted API keys)
model ModelProvider {
  id                String   @id @default(cuid())
  site_id           String?  // Multi-tenant scoping
  name              String   // openai, anthropic, google, perplexity
  display_name      String   // "OpenAI GPT-4", "Claude 3.5 Sonnet"
  provider_type     String   // llm, search, vision, embedding
  api_endpoint      String?
  api_key_encrypted String?  @db.Text // AES-GCM encrypted
  api_version       String?
  rate_limits_json  Json?    // Rate limiting configuration
  cost_per_token    Float?   // For cost tracking
  capabilities      String[] // text_generation, image_analysis, search
  model_config_json Json?    // Model-specific parameters
  is_active         Boolean  @default(true)
  last_tested_at    DateTime?
  test_status       String?  // success, failed, pending
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  model_routes      ModelRoute[]
  
  @@index([site_id])
  @@index([provider_type])
  @@index([is_active])
}

// LLM Request Routing and Load Balancing
model ModelRoute {
  id                  String   @id @default(cuid())
  site_id             String?  // Multi-tenant scoping
  route_name          String   // topic_research, content_generation, seo_audit
  primary_provider_id String
  fallback_provider_id String?
  routing_rules_json  Json     // Load balancing, failover rules
  cost_optimization   Boolean  @default(false)
  quality_threshold   Float?   // Minimum quality score to accept
  max_retries         Int      @default(3)
  timeout_seconds     Int      @default(30)
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  primary_provider    ModelProvider @relation(fields: [primary_provider_id], references: [id])
  
  @@index([site_id])
  @@index([route_name])
  @@index([is_active])
}

// Background Job Management and Monitoring
model BackgroundJob {
  id              String   @id @default(cuid())
  site_id         String?  // Multi-tenant scoping
  job_name        String   // backlink_inspector, topic_balancer, analytics_sync, cleanup
  job_type        String   // scheduled, triggered, manual
  schedule_cron   String?  // Cron expression for scheduled jobs
  parameters_json Json?    // Job-specific parameters
  status          String   @default("pending") // pending, running, completed, failed, cancelled
  started_at      DateTime?
  completed_at    DateTime?
  duration_ms     Int?
  result_json     Json?    // Job results and metrics
  error_message   String?  @db.Text
  retry_count     Int      @default(0)
  max_retries     Int      @default(3)
  next_run_at     DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@index([site_id])
  @@index([job_name])
  @@index([status])
  @@index([next_run_at])
  @@index([created_at])
}

// Exit Intent and Engagement Tracking
model ExitIntentImpression {
  id                String   @id @default(cuid())
  site_id           String?  // Multi-tenant scoping
  session_id        String   // Anonymous session tracking
  page_url          String
  user_agent        String?
  impression_type   String   // newsletter_modal, survey, special_offer
  trigger_event     String   // mouse_leave, scroll_up, time_on_page
  shown_at          DateTime @default(now())
  action_taken      String?  // subscribed, dismissed, ignored
  action_taken_at   DateTime?
  conversion_value  Float?   // If converted, track value
  ttl_expires_at    DateTime // Auto-cleanup after X days
  
  @@index([site_id])
  @@index([session_id])
  @@index([shown_at])
  @@index([ttl_expires_at]) // For cleanup job
}

// Enhanced User model relations for Phase 4C
// (Adding this to avoid schema conflicts - the User model already exists above)
model UserExtended {
  id                String   @id @default(cuid())
  user_id           String   @unique // Reference to existing User
  site_memberships  Json?    // Multi-site access control
  feature_preferences Json?  // User-specific feature toggles
  notification_settings Json? // Email, in-app notification preferences
  last_activity_at  DateTime?
  activity_streak   Int      @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  @@index([user_id])
  @@index([last_activity_at])
}

// =============================================================================
// PREMIUM BACKEND MODELS - PHASE 4 COMPLETE
// =============================================================================

// Enhanced Site model with premium features
model SitePremium {
  id                String   @id @default(cuid())
  siteId            String   @unique // Maps to existing Site if multi-tenant
  name              String
  slug              String   @unique
  domain            String?  @unique
  theme_id          String?
  settings_json     Json     // Site-specific configuration with feature flags
  logo_url          String?
  favicon_url       String?
  is_active         Boolean  @default(true)
  
  // Premium settings
  locale_settings   Json?    // Per-site locale configuration
  brand_settings    Json?    // Brand colors, fonts, etc.
  seo_settings      Json?    // Default SEO configuration
  analytics_settings Json?   // GA4, GSC, other analytics
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  site_themes       SiteThemePremium? @relation(fields: [theme_id], references: [id])
  site_members      SiteMemberPremium[]
  homepage_versions HomepageVersionPremium[]
  audit_logs        AuditLogPremium[]
  changes           ChangePremium[]
  affiliate_partners AffiliatePartner[]
  agreements        Agreement[]
  job_runs          JobRun[]
  
  @@index([is_active])
  @@index([slug])
  @@index([deleted_at])
  @@index([createdById])
}

// Enhanced SiteTheme with live preview capability
model SiteThemePremium {
  id                String   @id @default(cuid())
  siteId            String
  name              String
  tokens_json       Json     // CSS variables and theme tokens
  preview_url       String?
  is_active         Boolean  @default(false)
  
  // Versioning
  version           String   @default("1.0.0")
  parent_theme_id   String?
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  sites             SitePremium[]
  parent_theme      SiteThemePremium? @relation("ThemeVersions", fields: [parent_theme_id], references: [id])
  child_themes      SiteThemePremium[] @relation("ThemeVersions")
  
  @@index([siteId])
  @@index([is_active])
  @@index([deleted_at])
}

// Enhanced HomepageVersion with diff capability
model HomepageVersionPremium {
  id                String   @id @default(cuid())
  siteId            String
  version_id        String   @unique
  title             String
  blocks_data       Json     // Snapshot of all blocks at this version
  diff_from_previous Json?   // Diff from previous version for rollback
  published         Boolean  @default(false)
  is_draft          Boolean  @default(true)
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@index([siteId])
  @@index([published])
  @@index([is_draft])
  @@index([deleted_at])
}

// Enhanced Audit Log with full traceability
model AuditLogPremium {
  id                String   @id @default(cuid())
  siteId            String
  userId            String?
  action            String   // login, logout, create, update, delete, access, export
  resource          String?  // table or endpoint accessed
  resourceId        String?  // specific record ID
  details           Json?    // additional context
  ip_address        String?
  user_agent        String?
  success           Boolean  @default(true)
  error_message     String?
  trace_id          String?  // For distributed tracing
  
  // Reversibility
  reversible        Boolean  @default(false)
  reverse_operation Json?    // Data needed to reverse this operation
  reversed_at       DateTime?
  reversed_by       String?
  
  timestamp         DateTime @default(now())
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id])
  
  @@index([siteId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([resource])
  @@index([reversible])
}

// Change tracking for optimistic updates and undo
model ChangePremium {
  id                String   @id @default(cuid())
  siteId            String
  operation_id      String   @unique // Client-side operation ID
  operation_type    String   // create, update, delete, bulk_update
  table_name        String
  record_id         String?
  old_data          Json?    // Previous state
  new_data          Json?    // New state
  diff_data         Json?    // Specific changes
  
  // Status
  status            String   @default("pending") // pending, applied, failed, reverted
  applied_at        DateTime?
  reverted_at       DateTime?
  
  // Metadata
  createdById       String
  created_at        DateTime @default(now())
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@index([siteId])
  @@index([operation_id])
  @@index([status])
  @@index([table_name])
  @@index([created_at])
}

// Enhanced Site membership with premium roles
model SiteMemberPremium {
  id                String   @id @default(cuid())
  siteId            String
  userId            String
  role              String   // OWNER, ADMIN, EDITOR, REVIEWER, VIEWER
  permissions       Json?    // Additional granular permissions
  access_level      String   @default("standard") // standard, elevated, admin
  
  // Access control
  is_active         Boolean  @default(true)
  invited_at        DateTime?
  joined_at         DateTime?
  last_access_at    DateTime?
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([siteId, userId])
  @@index([siteId])
  @@index([userId])
  @@index([role])
  @@index([is_active])
}

// Affiliate Partner Management
model AffiliatePartner {
  id                String   @id @default(cuid())
  siteId            String
  name              String
  slug              String
  partner_type      String   // hotel, restaurant, attraction, service
  api_endpoint      String?
  api_key_encrypted String?  @db.Text // AES-GCM encrypted
  commission_rate   Float?
  contact_info      Json?
  
  // Status
  is_active         Boolean  @default(true)
  last_sync_at      DateTime?
  sync_status       String?  // success, failed, pending
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  widgets           AffiliateWidget[]
  assignments       AffiliateAssignment[]
  
  @@unique([siteId, slug])
  @@index([siteId])
  @@index([partner_type])
  @@index([is_active])
}

// Affiliate Widget Configuration
model AffiliateWidget {
  id                String   @id @default(cuid())
  siteId            String
  partner_id        String
  name              String
  widget_type       String   // banner, carousel, search, comparison
  config_json       Json     // Widget-specific configuration
  preview_url       String?
  
  // Placement
  placement_rules   Json?    // Where widget can be placed
  auto_placement    Boolean  @default(false)
  
  // Status
  is_active         Boolean  @default(true)
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  partner           AffiliatePartner @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  assignments       AffiliateAssignment[]
  
  @@index([siteId])
  @@index([partner_id])
  @@index([widget_type])
  @@index([is_active])
}

// Affiliate Assignment Matrix
model AffiliateAssignment {
  id                String   @id @default(cuid())
  siteId            String
  partner_id        String
  widget_id         String?
  content_id        String   // BlogPost, Place, etc.
  content_type      String   // blog_post, place, page
  
  // Assignment rules
  placement_data    Json?    // Specific placement within content
  auto_assigned     Boolean  @default(false)
  priority          Int      @default(1)
  
  // Performance
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  conversions       Int      @default(0)
  revenue           Float    @default(0)
  
  // Status
  is_active         Boolean  @default(true)
  
  // Metadata
  createdById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  partner           AffiliatePartner @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  widget            AffiliateWidget? @relation(fields: [widget_id], references: [id], onDelete: SetNull)
  
  @@index([siteId])
  @@index([partner_id])
  @@index([content_id, content_type])
  @@index([is_active])
}

// Agreement and Contract Management
model Agreement {
  id                String   @id @default(cuid())
  siteId            String
  title             String
  agreement_type    String   // affiliate, partnership, service, privacy, terms
  content           String   @db.Text
  version           String   @default("1.0")
  
  // Status
  status            String   @default("draft") // draft, active, expired, superseded
  effective_date    DateTime?
  expiry_date       DateTime?
  
  // Signatures
  signatures        Json?    // Digital signature data
  signed_at         DateTime?
  signed_by         String?
  
  // Metadata
  createdById       String
  updatedById       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@index([siteId])
  @@index([agreement_type])
  @@index([status])
  @@index([effective_date])
}

// Background Job Execution Tracking
model JobRun {
  id                String   @id @default(cuid())
  siteId            String
  job_name          String   // backlink_inspector, topic_balancer, analytics_sync
  job_type          String   // scheduled, triggered, manual
  schedule_cron     String?  // Cron expression for scheduled jobs
  parameters_json   Json?    // Job-specific parameters
  
  // Execution
  status            String   @default("pending") // pending, running, completed, failed, cancelled
  started_at        DateTime?
  completed_at      DateTime?
  duration_ms       Int?
  result_json       Json?    // Job results and metrics
  error_message     String?  @db.Text
  
  // Retry logic
  retry_count       Int      @default(0)
  max_retries       Int      @default(3)
  next_retry_at     DateTime?
  
  // Scheduling
  next_run_at       DateTime?
  
  // Metadata
  createdById       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  site              SitePremium @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@index([siteId])
  @@index([job_name])
  @@index([status])
  @@index([next_run_at])
  @@index([next_retry_at])
  @@index([created_at])
}
