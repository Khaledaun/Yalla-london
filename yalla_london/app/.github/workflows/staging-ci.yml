
name: Staging CI/CD Pipeline

on:
  push:
    branches: [staging, develop]
  pull_request:
    branches: [staging]

env:
  NODE_VERSION: '18'
  STAGING_URL: ${{ secrets.STAGING_URL }}
  DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL || secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET || secrets.NEXTAUTH_SECRET }}
  ABACUSAI_API_KEY: ${{ secrets.STAGING_ABACUSAI_API_KEY || secrets.ABACUSAI_API_KEY }}

jobs:
  lint-and-typecheck:
    name: Lint & TypeCheck
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug - Check staging CI secrets availability
        run: |
          echo "🔐 Checking staging CI secrets availability..."
          echo "STAGING_URL: $([[ -n "${{ secrets.STAGING_URL }}" ]] && echo "✅ yes" || echo "❌ no (using fallback)")"
          echo "DATABASE_URL: $([[ -n "${{ env.DATABASE_URL }}" ]] && echo "✅ configured" || echo "❌ not configured")"
          echo "NEXTAUTH_SECRET: $([[ -n "${{ env.NEXTAUTH_SECRET }}" ]] && echo "✅ configured" || echo "❌ not configured")"
          echo "ABACUSAI_API_KEY: $([[ -n "${{ env.ABACUSAI_API_KEY }}" ]] && echo "✅ configured" || echo "❌ not configured")"
          echo ""
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run TypeScript check
        run: yarn tsc --noEmit
        
      - name: Run ESLint
        run: yarn lint
        
      - name: Check Prisma schema
        run: yarn prisma validate

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Generate Prisma client
        run: yarn prisma generate
        
      - name: Build application
        run: yarn build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.STAGING_URL }}
          AWS_BUCKET_NAME: ${{ secrets.STAGING_AWS_BUCKET_NAME || "staging-bucket" }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID || "test" }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY || "test" }}
          AWS_REGION: ${{ secrets.AWS_REGION || "us-east-1" }}
          ABACUSAI_API_KEY: ${{ env.ABACUSAI_API_KEY }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 1

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: lhci autorun --config=lighthouserc-staging.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.LHCI_SERVER_BASE_URL }}
          STAGING_URL: ${{ secrets.STAGING_URL }}

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/staging' && vars.STAGING_URL
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Install Playwright
        run: npx playwright install chromium
        
      - name: Run API tests
        run: yarn playwright test tests/api-staging.spec.ts
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: api-test-results
          path: test-results/
          retention-days: 3

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/staging' && vars.STAGING_URL
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: npx playwright install
        
      - name: Run E2E tests
        run: yarn playwright test tests/e2e-staging.spec.ts
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 3
          
      - name: Upload trace files
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-traces
          path: playwright-report/
          retention-days: 3

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: yarn audit --level moderate
        
      - name: Check for secrets in code
        run: |
          if grep -r -i "password\|secret\|key" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
            echo "❌ Potential secrets found in code"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi

  deployment-ready:
    name: Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify deployment files
        run: |
          echo "Checking deployment configuration..."
          test -f vercel-staging.json && echo "✅ Vercel config found"
          test -f .env.staging.example && echo "✅ Environment template found"
          test -f scripts/seed-staging.ts && echo "✅ Staging seed script found"
          test -f README-STAGING.md && echo "✅ Staging documentation found"
          
      - name: Validate environment template
        run: |
          echo "Validating environment variables template..."
          if grep -q "your-staging" .env.staging.example; then
            echo "✅ Environment template contains placeholders"
          else
            echo "❌ Environment template missing placeholders"
            exit 1
          fi

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-test, lighthouse-ci, api-tests, e2e-tests, security-scan]
    if: success() && github.ref == 'refs/heads/staging'
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 Staging CI/CD pipeline completed successfully!"
          echo "✅ TypeScript compilation passed"
          echo "✅ Build completed successfully"  
          echo "✅ Lighthouse CI scores above thresholds"
          echo "✅ API tests passed"
          echo "✅ E2E tests passed"
          echo "✅ Security scan clean"
          echo ""
          echo "🚀 Ready for staging deployment!"

  detect-staging-failures:
    name: Detect Staging Failures
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-test, lighthouse-ci, api-tests, e2e-tests, security-scan, deployment-ready]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Note: This references the main repo's action, but in staging we may need to copy it
        
      - name: Check if failure detector exists
        id: check-detector
        run: |
          if [ -f "../../../.github/actions/failure-detector/action.yml" ]; then
            echo "detector-exists=true" >> $GITHUB_OUTPUT
          else
            echo "detector-exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Failure detector not found - using simplified detection"
          fi
        
      - name: Detect staging failures (simplified)
        if: steps.check-detector.outputs.detector-exists == 'false'
        run: |
          echo "## 🔍 Staging CI/CD Failure Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Job Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse CI: ${{ needs.lighthouse-ci.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for critical failures
          CRITICAL_FAILURES=""
          [ "${{ needs.lint-and-typecheck.result }}" == "failure" ] && CRITICAL_FAILURES="$CRITICAL_FAILURES lint-and-typecheck"
          [ "${{ needs.build-test.result }}" == "failure" ] && CRITICAL_FAILURES="$CRITICAL_FAILURES build-test"
          [ "${{ needs.security-scan.result }}" == "failure" ] && CRITICAL_FAILURES="$CRITICAL_FAILURES security-scan"
          
          if [ -n "$CRITICAL_FAILURES" ]; then
            echo "🚨 **Critical failures detected in:** $CRITICAL_FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Manual Action Required:** Review failed jobs and create issue if needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No critical failures detected**" >> $GITHUB_STEP_SUMMARY
          fi
