name: Security and Compliance Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20.17.0'

jobs:
  sast-security-scan:
    name: SAST - Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies with comprehensive validation
      working-directory: yalla_london/app
      run: |
        set -e
        echo "📦 Installing dependencies with comprehensive validation for SAST scanning..."
        
        # Check for conflicting package managers
        if [ -f "package-lock.json" ]; then
          echo "⚠️ package-lock.json found - removing to prevent Yarn conflicts"
          rm -f package-lock.json
        fi
        
        # Validate package.json integrity
        echo "🔍 Validating package.json integrity..."
        if ! jq empty package.json; then
          echo "❌ package.json is not valid JSON"
          exit 1
        fi
        
        # Check security dependencies
        echo "🔍 Validating security dependencies..."
        if ! jq -e '.devDependencies."eslint-plugin-security"' package.json >/dev/null; then
          echo "❌ eslint-plugin-security missing from package.json"
          echo "💡 Add eslint-plugin-security to devDependencies"
          exit 1
        fi
        
        echo "✅ Security dependencies validated"
        
        # Install dependencies with enhanced error handling
        if ! yarn install --frozen-lockfile --network-timeout 300000 2>&1 | tee security-install.log; then
          echo "❌ yarn install failed for security scanning"
          echo "📋 Install log:"
          cat security-install.log
          exit 1
        fi
        
        # Validate security tools are available
        if ! yarn list eslint-plugin-security >/dev/null 2>&1; then
          echo "❌ eslint-plugin-security not properly installed"
          exit 1
        fi
        
        echo "✅ Dependencies installed and validated successfully"

    - name: Run ESLint Security Scan with comprehensive analysis
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔍 Running ESLint security analysis..."
        
        # Verify security plugin is available (should be pre-installed from package.json)
        if ! yarn list eslint-plugin-security >/dev/null 2>&1; then
          echo "⚠️ eslint-plugin-security not found in dependencies"
          echo "💡 Make sure it's listed in package.json devDependencies"
          exit 1
        fi
        
        # Run ESLint with security rules
        ESLINT_EXIT_CODE=0
        npx eslint . --ext .ts,.tsx,.js,.jsx \
          --config .eslintrc.json \
          --format json \
          --output-file eslint-security-report.json \
          --quiet || ESLINT_EXIT_CODE=$?
        
        # Also generate human-readable format
        npx eslint . --ext .ts,.tsx,.js,.jsx \
          --config .eslintrc.json \
          --format stylish \
          --output-file eslint-security-readable.txt \
          --quiet || true
        
        # Analyze results
        if [ -f eslint-security-report.json ]; then
          echo "📊 Analyzing ESLint security results..."
          
          # Count security issues
          ERROR_COUNT=$(cat eslint-security-report.json | jq '[.[].errorCount] | add // 0')
          WARNING_COUNT=$(cat eslint-security-report.json | jq '[.[].warningCount] | add // 0')
          
          echo "ESLint Security Summary:"
          echo "- Errors: $ERROR_COUNT"
          echo "- Warnings: $WARNING_COUNT"
          
          echo "ESLINT_ERRORS=$ERROR_COUNT" >> $GITHUB_ENV
          echo "ESLINT_WARNINGS=$WARNING_COUNT" >> $GITHUB_ENV
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ ESLint security errors found - review required"
            echo "📋 Security issues detected in code"
          elif [ "$WARNING_COUNT" -gt 10 ]; then
            echo "⚠️ Many ESLint security warnings found"
          else
            echo "✅ ESLint security scan completed with minimal issues"
          fi
        else
          echo "⚠️ ESLint security report not generated"
        fi

    - name: Run Snyk Security Scan with enhanced error handling
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=yalla_london/app/package.json --severity-threshold=medium --json-file-output=snyk-report.json
      continue-on-error: true

    - name: Analyze Snyk results
      working-directory: yalla_london/app
      run: |
        echo "📊 Analyzing Snyk security results..."
        
        SNYK_ISSUES=0
        SNYK_HIGH_ISSUES=0
        SNYK_CRITICAL_ISSUES=0
        
        if [ -f "../snyk-report.json" ]; then
          echo "📋 Snyk report found, analyzing..."
          
          # Count vulnerabilities by severity
          if command -v jq >/dev/null 2>&1; then
            SNYK_ISSUES=$(cat ../snyk-report.json | jq '.vulnerabilities | length // 0' 2>/dev/null || echo 0)
            SNYK_HIGH_ISSUES=$(cat ../snyk-report.json | jq '[.vulnerabilities[] | select(.severity == "high")] | length // 0' 2>/dev/null || echo 0)
            SNYK_CRITICAL_ISSUES=$(cat ../snyk-report.json | jq '[.vulnerabilities[] | select(.severity == "critical")] | length // 0' 2>/dev/null || echo 0)
          fi
          
          echo "Snyk Security Summary:"
          echo "- Total issues: $SNYK_ISSUES"
          echo "- High severity: $SNYK_HIGH_ISSUES"
          echo "- Critical severity: $SNYK_CRITICAL_ISSUES"
          
          echo "SNYK_TOTAL=$SNYK_ISSUES" >> $GITHUB_ENV
          echo "SNYK_HIGH=$SNYK_HIGH_ISSUES" >> $GITHUB_ENV
          echo "SNYK_CRITICAL=$SNYK_CRITICAL_ISSUES" >> $GITHUB_ENV
          
          if [ "$SNYK_CRITICAL_ISSUES" -gt 0 ]; then
            echo "🚨 Critical vulnerabilities found in dependencies"
          elif [ "$SNYK_HIGH_ISSUES" -gt 5 ]; then
            echo "⚠️ Many high-severity vulnerabilities found"
          fi
        else
          echo "⚠️ Snyk report not available (may be due to missing token)"
          echo "SNYK_TOTAL=unknown" >> $GITHUB_ENV
        fi

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: sast-security-reports-${{ github.run_id }}
        path: |
          yalla_london/app/eslint-security-report.json
          yalla_london/app/eslint-security-readable.txt
          snyk-report.json
        retention-days: 30
        
    - name: Add SAST summary
      if: always()
      run: |
        echo "## 🔍 SAST Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Errors | Warnings | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # ESLint results
        if [ "${ESLINT_ERRORS:-0}" -gt 0 ]; then
          echo "| ESLint | ${ESLINT_ERRORS} | ${ESLINT_WARNINGS:-0} | ❌ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${ESLINT_WARNINGS:-0}" -gt 10 ]; then
          echo "| ESLint | 0 | ${ESLINT_WARNINGS} | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ESLint | 0 | ${ESLINT_WARNINGS:-0} | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Snyk results
        if [ "${SNYK_CRITICAL:-0}" -gt 0 ]; then
          echo "| Snyk | ${SNYK_CRITICAL} critical | ${SNYK_HIGH:-0} high | 🚨 |" >> $GITHUB_STEP_SUMMARY
        elif [ "${SNYK_HIGH:-0}" -gt 5 ]; then
          echo "| Snyk | 0 critical | ${SNYK_HIGH} high | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${SNYK_TOTAL:-unknown}" == "unknown" ]; then
          echo "| Snyk | - | - | ⏭️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Snyk | 0 critical | ${SNYK_HIGH:-0} high | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY

  rbac-security-tests:
    name: RBAC Security Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies with validation
      working-directory: yalla_london/app
      run: |
        set -e
        echo "📦 Installing dependencies for RBAC testing..."
        
        # Check for conflicting package managers
        if [ -f "package-lock.json" ]; then
          echo "⚠️ package-lock.json found - removing to prevent Yarn conflicts"
          rm -f package-lock.json
        fi
        
        yarn install --frozen-lockfile --network-timeout 300000
        echo "✅ Dependencies installed successfully"
        
        # Validate test dependencies are available
        echo "🔍 Validating test dependencies..."
        if ! yarn list jest >/dev/null 2>&1; then
          echo "❌ Jest not found - testing will fail"
          exit 1
        fi
        
        if ! yarn list @testing-library/react >/dev/null 2>&1; then
          echo "❌ React Testing Library not found - component tests will fail"
          exit 1
        fi
        
        echo "✅ Test dependencies validated"

    - name: Setup test environment
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔧 Setting up test environment..."
        
        # Wait for database to be ready
        echo "🗄️ Waiting for test database..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "✅ Test database ready"
        
        # Setup environment variables for testing
        echo "🔐 Configuring test environment variables..."
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export DIRECT_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export NEXTAUTH_SECRET="test-secret-key-for-rbac-tests-32-chars"
        export NEXTAUTH_URL="http://localhost:3000"
        
        echo "✅ Test environment configured"
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
        DIRECT_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

    - name: Run RBAC Security Tests with enhanced reporting
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🧪 Running RBAC security test suite..."
        
        TEST_WARNINGS=""
        RBAC_TEST_EXIT_CODE=0
        
        # Run RBAC tests without coverage thresholds to avoid CI failures
        echo "🔒 Executing RBAC security tests..."
        if npx jest tests/rbac.spec.ts tests/security-automation.spec.ts \
          --verbose \
          --collectCoverage=false \
          --json \
          --outputFile=rbac-test-results.json \
          --testTimeout=30000 \
          --forceExit 2>&1 | tee rbac-test-output.log; then
          echo "✅ RBAC tests completed successfully"
        else
          RBAC_TEST_EXIT_CODE=$?
          echo "❌ RBAC tests failed with exit code $RBAC_TEST_EXIT_CODE"
          
          # Analyze test failures
          if grep -q "timeout" rbac-test-output.log; then
            TEST_WARNINGS="$TEST_WARNINGS\n⚠️ Test timeouts detected - may indicate performance issues"
          fi
          
          if grep -q "Cannot find module" rbac-test-output.log; then
            TEST_WARNINGS="$TEST_WARNINGS\n❌ Missing test dependencies"
          fi
          
          if grep -q "Database" rbac-test-output.log; then
            TEST_WARNINGS="$TEST_WARNINGS\n⚠️ Database connectivity issues during testing"
          fi
          
          # For now, warn but don't fail the build to avoid blocking
          echo "⚠️ RBAC tests failed but continuing build - review required"
          echo "RBAC_TEST_FAILED=true" >> $GITHUB_ENV
        fi
        
        # Parse test results if available
        if [ -f rbac-test-results.json ]; then
          echo "📊 Analyzing RBAC test results..."
          
          if command -v jq >/dev/null 2>&1; then
            TESTS_TOTAL=$(cat rbac-test-results.json | jq '.numTotalTests // 0')
            TESTS_PASSED=$(cat rbac-test-results.json | jq '.numPassedTests // 0')
            TESTS_FAILED=$(cat rbac-test-results.json | jq '.numFailedTests // 0')
            TESTS_SKIPPED=$(cat rbac-test-results.json | jq '.numPendingTests // 0')
            
            echo "RBAC Test Summary:"
            echo "- Total: $TESTS_TOTAL"
            echo "- Passed: $TESTS_PASSED"
            echo "- Failed: $TESTS_FAILED"
            echo "- Skipped: $TESTS_SKIPPED"
            
            echo "RBAC_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
            echo "RBAC_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
            echo "RBAC_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
            echo "RBAC_SKIPPED=$TESTS_SKIPPED" >> $GITHUB_ENV
          fi
        fi
        
        if [ -n "$TEST_WARNINGS" ]; then
          echo "RBAC_TEST_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$TEST_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
        DIRECT_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
        NEXTAUTH_SECRET: "test-secret-key-for-rbac-tests-32-chars"
        NEXTAUTH_URL: "http://localhost:3000"

    - name: Validate Permission Matrix with enhanced checking
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔍 Validating RBAC permission matrix..."
        
        VALIDATION_WARNINGS=""
        VALIDATION_ERRORS=""
        
        # Enhanced permission matrix validation
        node -e "
        try {
          // Import RBAC configuration
          const fs = require('fs');
          const path = require('path');
          
          // Try to find RBAC file
          let rbacPath = 'lib/rbac.ts';
          if (!fs.existsSync(rbacPath)) {
            rbacPath = 'lib/rbac.js';
          }
          
          if (!fs.existsSync(rbacPath)) {
            console.log('⚠️ RBAC configuration file not found - skipping matrix validation');
            process.exit(0);
          }
          
          console.log('📋 Loading RBAC configuration from ' + rbacPath);
          
          // For TypeScript files, we'll check the structure without importing
          const rbacContent = fs.readFileSync(rbacPath, 'utf8');
          
          // Basic structure validation
          if (!rbacContent.includes('ROLES') || !rbacContent.includes('PERMISSIONS')) {
            throw new Error('RBAC file missing ROLES or PERMISSIONS exports');
          }
          
          console.log('✓ RBAC configuration structure appears valid');
          
          // Check for common RBAC patterns
          const hasAdminRole = rbacContent.includes('ADMIN') || rbacContent.includes('admin');
          const hasViewerRole = rbacContent.includes('VIEWER') || rbacContent.includes('viewer');
          const hasEditorRole = rbacContent.includes('EDITOR') || rbacContent.includes('editor');
          
          console.log('Role analysis:');
          console.log(\`✓ Admin role detected: \${hasAdminRole}\`);
          console.log(\`✓ Editor role detected: \${hasEditorRole}\`);
          console.log(\`✓ Viewer role detected: \${hasViewerRole}\`);
          
          if (!hasAdminRole) {
            console.log('⚠️ No admin role detected - this may be intentional');
          }
          
          // Check for permission patterns
          const hasCreatePermission = rbacContent.includes('create') || rbacContent.includes('CREATE');
          const hasReadPermission = rbacContent.includes('read') || rbacContent.includes('READ');
          const hasUpdatePermission = rbacContent.includes('update') || rbacContent.includes('UPDATE');
          const hasDeletePermission = rbacContent.includes('delete') || rbacContent.includes('DELETE');
          
          console.log('Permission analysis:');
          console.log(\`✓ Create permissions: \${hasCreatePermission}\`);
          console.log(\`✓ Read permissions: \${hasReadPermission}\`);
          console.log(\`✓ Update permissions: \${hasUpdatePermission}\`);
          console.log(\`✓ Delete permissions: \${hasDeletePermission}\`);
          
          console.log('✓ RBAC matrix validation completed successfully');
          
        } catch (error) {
          console.log('❌ RBAC validation failed:', error.message);
          process.exit(1);
        }
        " 2>&1 | tee rbac-validation.log
        
        # Check validation results
        if grep -q "❌" rbac-validation.log; then
          echo "❌ RBAC validation found errors"
          VALIDATION_ERRORS="RBAC matrix validation failed"
        elif grep -q "⚠️" rbac-validation.log; then
          echo "⚠️ RBAC validation found warnings"
          VALIDATION_WARNINGS="RBAC matrix validation warnings found"
        else
          echo "✅ RBAC validation completed successfully"
        fi
        
        if [ -n "$VALIDATION_ERRORS" ]; then
          echo "RBAC_VALIDATION_ERRORS=$VALIDATION_ERRORS" >> $GITHUB_ENV
        fi
        
        if [ -n "$VALIDATION_WARNINGS" ]; then
          echo "RBAC_VALIDATION_WARNINGS=$VALIDATION_WARNINGS" >> $GITHUB_ENV
        fi

    - name: Upload RBAC Test Results
      uses: actions/upload-artifact@v4
      with:
        name: rbac-test-results-${{ github.run_id }}
        path: |
          yalla_london/app/rbac-test-results.json
          yalla_london/app/rbac-test-output.log
          yalla_london/app/rbac-validation.log
        retention-days: 30
        
    - name: Add RBAC summary
      if: always()
      run: |
        echo "## 🔒 RBAC Security Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${RBAC_TOTAL:-0}" -gt 0 ]; then
          echo "| Total Tests | ${RBAC_TOTAL} | ℹ️ |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${RBAC_FAILED:-0}" -gt 0 ]; then
            echo "| Passed Tests | ${RBAC_PASSED:-0} | ⚠️ |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed Tests | ${RBAC_FAILED} | ❌ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Passed Tests | ${RBAC_PASSED:-0} | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed Tests | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${RBAC_SKIPPED:-0}" -gt 0 ]; then
            echo "| Skipped Tests | ${RBAC_SKIPPED} | ⚠️ |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| Test Execution | - | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Matrix validation
        if [ -n "${RBAC_VALIDATION_ERRORS:-}" ]; then
          echo "| Matrix Validation | Failed | ❌ |" >> $GITHUB_STEP_SUMMARY
        elif [ -n "${RBAC_VALIDATION_WARNINGS:-}" ]; then
          echo "| Matrix Validation | Warnings | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Matrix Validation | Passed | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Warnings section
        if [ -n "${RBAC_TEST_WARNINGS:-}${RBAC_VALIDATION_WARNINGS:-}" ]; then
          echo "### ⚠️ Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${RBAC_TEST_WARNINGS:-}" ]; then
            echo "**Test Warnings:**" >> $GITHUB_STEP_SUMMARY
            echo "${RBAC_TEST_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${RBAC_VALIDATION_WARNINGS:-}" ]; then
            echo "**Validation Warnings:**" >> $GITHUB_STEP_SUMMARY
            echo "${RBAC_VALIDATION_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "### 📋 Coverage Note" >> $GITHUB_STEP_SUMMARY
        echo "RBAC tests run without coverage thresholds to prevent CI failures while ensuring security validation." >> $GITHUB_STEP_SUMMARY

  dast-security-scan:
    name: DAST - Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies and prepare test environment
      working-directory: yalla_london/app
      run: |
        set -e
        echo "📦 Installing dependencies for DAST testing..."
        
        # Check for conflicting package managers
        if [ -f "package-lock.json" ]; then
          echo "⚠️ package-lock.json found - removing to prevent Yarn conflicts"
          rm -f package-lock.json
        fi
        
        yarn install --frozen-lockfile --network-timeout 300000
        echo "✅ Dependencies installed successfully"
        
        # Wait for database to be ready
        echo "🗄️ Waiting for test database..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "✅ Test database ready"

    - name: Setup test environment with enhanced configuration
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔧 Setting up test environment for DAST scanning..."
        
        # Create minimal test environment configuration
        if [ ! -f .env ]; then
          echo "📝 Creating test environment configuration..."
          cp .env.example .env 2>/dev/null || touch .env
        fi
        
        # Set essential environment variables for testing
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "DIRECT_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "NEXTAUTH_SECRET=test-secret-for-security-scan-32-chars-minimum" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "NODE_ENV=test" >> .env
        
        # Disable external integrations for security testing
        echo "AWS_ACCESS_KEY_ID=test" >> .env
        echo "AWS_SECRET_ACCESS_KEY=test" >> .env
        echo "AWS_BUCKET_NAME=test-bucket" >> .env
        echo "AWS_REGION=us-east-1" >> .env
        
        # Disable features that might interfere with testing
        echo "FEATURE_ANALYTICS_ENABLED=false" >> .env
        echo "FEATURE_SOCIAL_EMBEDS=false" >> .env
        echo "FEATURE_AUTO_PUBLISHING=false" >> .env
        
        echo "✅ Test environment configured"

    - name: Build application for DAST testing
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🏗️ Building application for DAST testing..."
        
        # Generate Prisma client
        if ! yarn prisma generate --schema prisma/schema.prisma 2>&1 | tee prisma-generate-dast.log; then
          echo "⚠️ Prisma generation failed, continuing with dev server"
          cat prisma-generate-dast.log
        fi
        
        # Try to build, but don't fail if it doesn't work
        if yarn build 2>&1 | tee build-dast.log; then
          echo "✅ Production build successful"
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "⚠️ Production build failed, will use development server"
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
          cat build-dast.log
        fi

    - name: Start application server with health checks
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🚀 Starting application server for DAST testing..."
        
        # Start server based on build success
        if [ "${BUILD_SUCCESS:-false}" == "true" ]; then
          echo "🏭 Starting production server..."
          yarn start &
        else
          echo "🔧 Starting development server..."
          yarn dev &
        fi
        
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        echo "📝 Server PID: $SERVER_PID"
        
        # Wait for server to start with health checks
        echo "⏳ Waiting for server to be ready..."
        RETRY_COUNT=0
        MAX_RETRIES=30
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Server is ready and responding"
            break
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "⏳ Waiting for server (attempt $RETRY_COUNT/$MAX_RETRIES)..."
          sleep 5
          
          # Check if server process is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Server process died"
            exit 1
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "❌ Server failed to start within timeout"
          exit 1
        fi
        
        # Test basic endpoints
        echo "🔍 Testing basic endpoints..."
        curl -f -s http://localhost:3000 > homepage-test.html || echo "⚠️ Homepage test failed"
        curl -f -s http://localhost:3000/api/health > health-test.json 2>/dev/null || echo "⚠️ Health endpoint test failed"
        
        echo "✅ Server is ready for DAST scanning"

    - name: Run OWASP ZAP Security Scan with enhanced configuration
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.conf'
        cmd_options: '-a -j -m 2 -T 15 -z "-config spider.maxDuration=5"'
        fail_action: false
        allow_issue_writing: false
      continue-on-error: true

    - name: Analyze DAST results
      run: |
        echo "📊 Analyzing DAST security scan results..."
        
        DAST_WARNINGS=""
        DAST_ERRORS=""
        VULNERABILITIES_FOUND=0
        
        # Check if ZAP report exists
        if [ -f report_html.html ]; then
          echo "✅ DAST report generated successfully"
          
          # Extract vulnerability counts from HTML report
          if grep -q "High" report_html.html; then
            HIGH_ISSUES=$(grep -o "High" report_html.html | wc -l || echo 0)
            echo "High risk issues: $HIGH_ISSUES"
            if [ "$HIGH_ISSUES" -gt 0 ]; then
              DAST_ERRORS="$DAST_ERRORS\n🚨 $HIGH_ISSUES high-risk vulnerabilities found"
              VULNERABILITIES_FOUND=$((VULNERABILITIES_FOUND + HIGH_ISSUES))
            fi
          fi
          
          if grep -q "Medium" report_html.html; then
            MEDIUM_ISSUES=$(grep -o "Medium" report_html.html | wc -l || echo 0)
            echo "Medium risk issues: $MEDIUM_ISSUES"
            if [ "$MEDIUM_ISSUES" -gt 5 ]; then
              DAST_WARNINGS="$DAST_WARNINGS\n⚠️ $MEDIUM_ISSUES medium-risk vulnerabilities found"
            fi
            VULNERABILITIES_FOUND=$((VULNERABILITIES_FOUND + MEDIUM_ISSUES))
          fi
          
          if grep -q "Low" report_html.html; then
            LOW_ISSUES=$(grep -o "Low" report_html.html | wc -l || echo 0)
            echo "Low risk issues: $LOW_ISSUES"
            VULNERABILITIES_FOUND=$((VULNERABILITIES_FOUND + LOW_ISSUES))
          fi
          
          echo "DAST_VULNERABILITIES=$VULNERABILITIES_FOUND" >> $GITHUB_ENV
          echo "DAST_HIGH=${HIGH_ISSUES:-0}" >> $GITHUB_ENV
          echo "DAST_MEDIUM=${MEDIUM_ISSUES:-0}" >> $GITHUB_ENV
          echo "DAST_LOW=${LOW_ISSUES:-0}" >> $GITHUB_ENV
          
        else
          echo "⚠️ DAST report not found - scan may have failed"
          DAST_WARNINGS="$DAST_WARNINGS\n⚠️ DAST scan report not generated"
        fi
        
        # Check for common security headers
        echo "🔍 Checking security headers..."
        if curl -I http://localhost:3000 2>/dev/null | grep -q "X-Frame-Options"; then
          echo "✅ X-Frame-Options header found"
        else
          echo "⚠️ X-Frame-Options header missing"
          DAST_WARNINGS="$DAST_WARNINGS\n⚠️ Missing X-Frame-Options security header"
        fi
        
        if curl -I http://localhost:3000 2>/dev/null | grep -q "X-Content-Type-Options"; then
          echo "✅ X-Content-Type-Options header found"
        else
          echo "⚠️ X-Content-Type-Options header missing"
          DAST_WARNINGS="$DAST_WARNINGS\n⚠️ Missing X-Content-Type-Options security header"
        fi
        
        # Set environment variables for summary
        if [ -n "$DAST_WARNINGS" ]; then
          echo "DAST_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$DAST_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$DAST_ERRORS" ]; then
          echo "DAST_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$DAST_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo "✅ DAST analysis completed"

    - name: Stop application server
      if: always()
      run: |
        echo "🛑 Stopping application server..."
        if [ -n "${SERVER_PID:-}" ] && kill -0 $SERVER_PID 2>/dev/null; then
          kill $SERVER_PID
          echo "✅ Server stopped"
        else
          echo "ℹ️ Server was not running or already stopped"
        fi

    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      with:
        name: dast-security-report-${{ github.run_id }}
        path: |
          report_html.html
          yalla_london/app/homepage-test.html
          yalla_london/app/health-test.json
          yalla_london/app/build-dast.log
          yalla_london/app/prisma-generate-dast.log
        retention-days: 30
        
    - name: Add DAST summary
      if: always()
      run: |
        echo "## 🔍 DAST Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 Scan Configuration" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Target URL | http://localhost:3000 |" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Full OWASP ZAP scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Success | ${BUILD_SUCCESS:-false} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${DAST_VULNERABILITIES:-0}" -gt 0 ]; then
          echo "| Vulnerabilities | ${DAST_VULNERABILITIES} found |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Vulnerabilities | None detected |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🛡️ Vulnerability Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Risk Level | Count | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${DAST_HIGH:-0}" -gt 0 ]; then
          echo "| High | ${DAST_HIGH} | 🚨 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| High | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${DAST_MEDIUM:-0}" -gt 5 ]; then
          echo "| Medium | ${DAST_MEDIUM} | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${DAST_MEDIUM:-0}" -gt 0 ]; then
          echo "| Medium | ${DAST_MEDIUM} | ℹ️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Medium | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "| Low | ${DAST_LOW:-0} | ℹ️ |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Errors and warnings
        if [ -n "${DAST_ERRORS:-}" ]; then
          echo "### 🚨 Critical Security Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${DAST_ERRORS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${DAST_WARNINGS:-}" ]; then
          echo "### ⚠️ Security Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${DAST_WARNINGS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the detailed DAST report in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Address high and medium risk vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "3. Implement missing security headers" >> $GITHUB_STEP_SUMMARY
        echo "4. Run DAST scans regularly to catch new issues" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ℹ️ Scan Notes" >> $GITHUB_STEP_SUMMARY
        echo "- DAST scans run on schedule or when commit message contains '[security-scan]'" >> $GITHUB_STEP_SUMMARY
        echo "- Scan uses test environment with disabled external integrations" >> $GITHUB_STEP_SUMMARY
        echo "- Full report available in workflow artifacts" >> $GITHUB_STEP_SUMMARY

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install audit tools
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔧 Setting up dependency audit tools..."
        
        # Ensure we have the latest npm for better audit results
        npm install -g npm@latest
        
        # Check if yarn and npm are available
        echo "📋 Tool versions:"
        echo "- Node.js: $(node --version)"
        echo "- npm: $(npm --version)"
        echo "- yarn: $(yarn --version)"
        
        echo "✅ Audit tools ready"

    - name: Run npm audit with detailed analysis
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔍 Running npm dependency audit..."
        
        NPM_AUDIT_EXIT_CODE=0
        
        # Run npm audit with JSON output
        if npm audit --audit-level=low --json > npm-audit-report.json 2>&1; then
          echo "✅ npm audit completed without issues"
        else
          NPM_AUDIT_EXIT_CODE=$?
          echo "⚠️ npm audit found vulnerabilities (exit code: $NPM_AUDIT_EXIT_CODE)"
        fi
        
        # Analyze npm audit results
        if [ -f npm-audit-report.json ]; then
          echo "📊 Analyzing npm audit results..."
          
          if command -v jq >/dev/null 2>&1; then
            # Extract vulnerability counts
            CRITICAL_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
            HIGH_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.high // 0')
            MODERATE_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.moderate // 0')
            LOW_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.low // 0')
            INFO_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.info // 0')
            TOTAL_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.total // 0')
            
            echo "npm Audit Summary:"
            echo "- Critical: $CRITICAL_VULNS"
            echo "- High: $HIGH_VULNS"
            echo "- Moderate: $MODERATE_VULNS"
            echo "- Low: $LOW_VULNS"
            echo "- Info: $INFO_VULNS"
            echo "- Total: $TOTAL_VULNS"
            
            # Set environment variables
            echo "NPM_CRITICAL=$CRITICAL_VULNS" >> $GITHUB_ENV
            echo "NPM_HIGH=$HIGH_VULNS" >> $GITHUB_ENV
            echo "NPM_MODERATE=$MODERATE_VULNS" >> $GITHUB_ENV
            echo "NPM_LOW=$LOW_VULNS" >> $GITHUB_ENV
            echo "NPM_TOTAL=$TOTAL_VULNS" >> $GITHUB_ENV
            
            # Generate human-readable report
            npm audit --audit-level=low > npm-audit-readable.txt 2>&1 || true
          else
            echo "⚠️ jq not available for detailed analysis"
          fi
        else
          echo "⚠️ npm audit report not generated"
        fi
        
    - name: Run yarn audit with enhanced reporting
      working-directory: yalla_london/app
      run: |
        set -e
        echo "🔍 Running yarn dependency audit..."
        
        YARN_AUDIT_EXIT_CODE=0
        YARN_WARNINGS=""
        
        # Run yarn audit with JSON output
        if yarn audit --level moderate --json > yarn-audit-report.json 2>&1; then
          echo "✅ yarn audit completed without moderate+ issues"
        else
          YARN_AUDIT_EXIT_CODE=$?
          echo "⚠️ yarn audit found vulnerabilities (exit code: $YARN_AUDIT_EXIT_CODE)"
        fi
        
        # Analyze yarn audit results
        if [ -f yarn-audit-report.json ]; then
          echo "📊 Analyzing yarn audit results..."
          
          # Count vulnerabilities from yarn audit JSON
          YARN_ADVISORIES=0
          if command -v jq >/dev/null 2>&1; then
            # Yarn audit JSON format is different from npm
            YARN_ADVISORIES=$(cat yarn-audit-report.json | jq 'select(.type == "auditAdvisory") | .data' 2>/dev/null | wc -l || echo 0)
          fi
          
          echo "yarn Audit Summary:"
          echo "- Advisories found: $YARN_ADVISORIES"
          
          echo "YARN_ADVISORIES=$YARN_ADVISORIES" >> $GITHUB_ENV
          
          # Generate human-readable report
          yarn audit --level moderate > yarn-audit-readable.txt 2>&1 || true
        else
          echo "⚠️ yarn audit report not generated"
        fi

    - name: Analyze and compare audit results
      working-directory: yalla_london/app
      run: |
        set -e
        echo "📊 Analyzing dependency audit results..."
        
        AUDIT_WARNINGS=""
        AUDIT_ERRORS=""
        
        # Check npm results
        if [ "${NPM_CRITICAL:-0}" -gt 0 ]; then
          echo "🚨 CRITICAL: ${NPM_CRITICAL} critical vulnerabilities found by npm audit"
          AUDIT_ERRORS="$AUDIT_ERRORS\n🚨 ${NPM_CRITICAL} critical vulnerabilities"
        fi
        
        if [ "${NPM_HIGH:-0}" -gt 5 ]; then
          echo "⚠️ WARNING: Many high-severity vulnerabilities (${NPM_HIGH}) found"
          AUDIT_WARNINGS="$AUDIT_WARNINGS\n⚠️ ${NPM_HIGH} high-severity vulnerabilities"
        elif [ "${NPM_HIGH:-0}" -gt 0 ]; then
          echo "⚠️ ${NPM_HIGH} high-severity vulnerabilities found"
          AUDIT_WARNINGS="$AUDIT_WARNINGS\n⚠️ ${NPM_HIGH} high-severity vulnerabilities"
        fi
        
        if [ "${NPM_MODERATE:-0}" -gt 20 ]; then
          echo "⚠️ Many moderate vulnerabilities (${NPM_MODERATE}) found"
          AUDIT_WARNINGS="$AUDIT_WARNINGS\n⚠️ ${NPM_MODERATE} moderate vulnerabilities"
        fi
        
        # Check for outdated packages
        echo "📦 Checking for outdated packages..."
        if npm outdated --json > outdated-packages.json 2>/dev/null; then
          OUTDATED_COUNT=0
          if command -v jq >/dev/null 2>&1; then
            OUTDATED_COUNT=$(cat outdated-packages.json | jq 'keys | length // 0')
          fi
          
          if [ "$OUTDATED_COUNT" -gt 50 ]; then
            echo "⚠️ Many outdated packages ($OUTDATED_COUNT) found"
            AUDIT_WARNINGS="$AUDIT_WARNINGS\n⚠️ $OUTDATED_COUNT outdated packages"
          elif [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "ℹ️ $OUTDATED_COUNT outdated packages found"
          fi
          
          echo "OUTDATED_PACKAGES=$OUTDATED_COUNT" >> $GITHUB_ENV
        fi
        
        # Generate recommendations
        RECOMMENDATIONS=""
        if [ "${NPM_CRITICAL:-0}" -gt 0 ] || [ "${NPM_HIGH:-0}" -gt 0 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS\n🔧 Run 'npm audit fix' to automatically fix vulnerabilities"
          RECOMMENDATIONS="$RECOMMENDATIONS\n📋 Review and update dependencies manually for complex issues"
        fi
        
        if [ "${OUTDATED_PACKAGES:-0}" -gt 10 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS\n📦 Consider updating outdated packages: npm update"
        fi
        
        # Set environment variables for summary
        if [ -n "$AUDIT_WARNINGS" ]; then
          echo "AUDIT_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$AUDIT_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$AUDIT_ERRORS" ]; then
          echo "AUDIT_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$AUDIT_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$RECOMMENDATIONS" ]; then
          echo "AUDIT_RECOMMENDATIONS<<EOF" >> $GITHUB_ENV
          echo -e "$RECOMMENDATIONS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        # Determine if build should fail (currently warning only)
        if [ "${NPM_CRITICAL:-0}" -gt 0 ]; then
          echo "🚨 Build warning: Critical vulnerabilities found"
          echo "💡 Consider fixing critical vulnerabilities before deployment"
          # For now, warn but don't fail - can be made stricter later
          # exit 1
        fi
        
        echo "✅ Dependency audit analysis completed"

    - name: Upload Audit Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-reports-${{ github.run_id }}
        path: |
          yalla_london/app/npm-audit-report.json
          yalla_london/app/npm-audit-readable.txt
          yalla_london/app/yarn-audit-report.json
          yalla_london/app/yarn-audit-readable.txt
          yalla_london/app/outdated-packages.json
        retention-days: 30
        
    - name: Add dependency audit summary
      if: always()
      run: |
        echo "## 📦 Dependency Security Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔍 Vulnerability Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Critical | High | Moderate | Low | Total |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|------|----------|-----|-------|" >> $GITHUB_STEP_SUMMARY
        
        # npm results
        echo "| npm | ${NPM_CRITICAL:-0} | ${NPM_HIGH:-0} | ${NPM_MODERATE:-0} | ${NPM_LOW:-0} | ${NPM_TOTAL:-0} |" >> $GITHUB_STEP_SUMMARY
        
        # yarn results
        if [ "${YARN_ADVISORIES:-0}" -gt 0 ]; then
          echo "| yarn | - | - | - | - | ${YARN_ADVISORIES} advisories |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| yarn | 0 | 0 | 0 | 0 | 0 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Package Status" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${OUTDATED_PACKAGES:-0}" -gt 50 ]; then
          echo "| Outdated Packages | ${OUTDATED_PACKAGES} | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${OUTDATED_PACKAGES:-0}" -gt 0 ]; then
          echo "| Outdated Packages | ${OUTDATED_PACKAGES} | ℹ️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Outdated Packages | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall status
        if [ "${NPM_CRITICAL:-0}" -gt 0 ]; then
          echo "| Overall Security | Critical Issues | 🚨 |" >> $GITHUB_STEP_SUMMARY
        elif [ "${NPM_HIGH:-0}" -gt 5 ]; then
          echo "| Overall Security | High Risk | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${NPM_HIGH:-0}" -gt 0 ] || [ "${NPM_MODERATE:-0}" -gt 10 ]; then
          echo "| Overall Security | Moderate Risk | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Overall Security | Low Risk | ✅ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Warnings and errors
        if [ -n "${AUDIT_ERRORS:-}" ]; then
          echo "### 🚨 Critical Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${AUDIT_ERRORS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${AUDIT_WARNINGS:-}" ]; then
          echo "### ⚠️ Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${AUDIT_WARNINGS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Recommendations
        if [ -n "${AUDIT_RECOMMENDATIONS:-}" ]; then
          echo "### 🔧 Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${AUDIT_RECOMMENDATIONS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review detailed audit reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Update vulnerable dependencies using \`npm audit fix\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Consider updating outdated packages regularly" >> $GITHUB_STEP_SUMMARY
        echo "4. Monitor dependency security with automated tools" >> $GITHUB_STEP_SUMMARY

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check GDPR Compliance with enhanced validation
      run: |
        set -e
        echo "🔍 Checking GDPR compliance requirements..."
        
        GDPR_WARNINGS=""
        GDPR_ERRORS=""
        GDPR_CHECKS_PASSED=0
        GDPR_CHECKS_TOTAL=0
        
        # Check for data retention policies
        GDPR_CHECKS_TOTAL=$((GDPR_CHECKS_TOTAL + 1))
        echo "📋 Checking data retention policies..."
        if grep -r "retention" docs/ yalla_london/app/lib/ 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Data retention policies found"
          GDPR_CHECKS_PASSED=$((GDPR_CHECKS_PASSED + 1))
        else
          echo "❌ No data retention policies found"
          GDPR_ERRORS="$GDPR_ERRORS\n❌ Missing data retention policies"
        fi
        
        # Check for audit logging
        GDPR_CHECKS_TOTAL=$((GDPR_CHECKS_TOTAL + 1))
        echo "📋 Checking audit logging implementation..."
        if find yalla_london/app -name "*.ts" -exec grep -l "logAuditEvent\|AuditLog\|audit" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Audit logging implementation found"
          GDPR_CHECKS_PASSED=$((GDPR_CHECKS_PASSED + 1))
        else
          echo "❌ Audit logging not implemented"
          GDPR_ERRORS="$GDPR_ERRORS\n❌ Audit logging not implemented"
        fi
        
        # Check for user consent tracking
        GDPR_CHECKS_TOTAL=$((GDPR_CHECKS_TOTAL + 1))
        echo "📋 Checking user consent tracking..."
        if find yalla_london/app -name "*.ts" -exec grep -l "consent\|privacy\|cookie.*accept" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ User consent tracking found"
          GDPR_CHECKS_PASSED=$((GDPR_CHECKS_PASSED + 1))
        else
          echo "⚠️ User consent tracking may be missing"
          GDPR_WARNINGS="$GDPR_WARNINGS\n⚠️ User consent tracking not clearly implemented"
        fi
        
        # Check for data protection measures
        GDPR_CHECKS_TOTAL=$((GDPR_CHECKS_TOTAL + 1))
        echo "📋 Checking data protection measures..."
        if find yalla_london/app -name "*.ts" -exec grep -l "encrypt\|hash\|bcrypt\|crypto" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Data protection measures found"
          GDPR_CHECKS_PASSED=$((GDPR_CHECKS_PASSED + 1))
        else
          echo "⚠️ Data protection measures not clearly implemented"
          GDPR_WARNINGS="$GDPR_WARNINGS\n⚠️ Data encryption/protection not clearly implemented"
        fi
        
        # Check for privacy policy
        GDPR_CHECKS_TOTAL=$((GDPR_CHECKS_TOTAL + 1))
        echo "📋 Checking privacy policy documentation..."
        if find . -name "*.md" -exec grep -l "privacy\|GDPR\|data.*protection" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Privacy policy documentation found"
          GDPR_CHECKS_PASSED=$((GDPR_CHECKS_PASSED + 1))
        else
          echo "⚠️ Privacy policy documentation not found"
          GDPR_WARNINGS="$GDPR_WARNINGS\n⚠️ Privacy policy documentation missing"
        fi
        
        echo "GDPR_CHECKS_PASSED=$GDPR_CHECKS_PASSED" >> $GITHUB_ENV
        echo "GDPR_CHECKS_TOTAL=$GDPR_CHECKS_TOTAL" >> $GITHUB_ENV
        
        if [ -n "$GDPR_WARNINGS" ]; then
          echo "GDPR_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$GDPR_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$GDPR_ERRORS" ]; then
          echo "GDPR_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$GDPR_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo "✓ GDPR compliance checks completed ($GDPR_CHECKS_PASSED/$GDPR_CHECKS_TOTAL passed)"

    - name: Check SOC2 Controls with detailed analysis
      run: |
        set -e
        echo "🔍 Checking SOC2 compliance controls..."
        
        SOC2_WARNINGS=""
        SOC2_ERRORS=""
        SOC2_CHECKS_PASSED=0
        SOC2_CHECKS_TOTAL=0
        
        # Check for access control implementation
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking access control implementation..."
        if find yalla_london/app -name "*.ts" -exec grep -l "withAdminAuth\|rbac\|permission\|authorize" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Access controls implemented"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "❌ Access controls not implemented"
          SOC2_ERRORS="$SOC2_ERRORS\n❌ Access controls not implemented"
        fi
        
        # Check for audit logging
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking audit logging system..."
        if find yalla_london/app -name "*.ts" -exec grep -l "AuditLog\|audit.*event\|log.*action" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Audit logging implemented"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "❌ Audit logging not implemented"
          SOC2_ERRORS="$SOC2_ERRORS\n❌ Audit logging not implemented"
        fi
        
        # Check for backup procedures
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking backup procedures..."
        if find . -name "*backup*" -o -name "*restore*" -o -name "*.md" -exec grep -l "backup\|restore\|recovery" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Backup procedures documented"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "❌ Backup procedures not documented"
          SOC2_ERRORS="$SOC2_ERRORS\n❌ Backup procedures not documented"
        fi
        
        # Check for encryption implementation
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking encryption implementation..."
        if find yalla_london/app -name "*.ts" -exec grep -l "encrypt\|crypto\|bcrypt\|hash" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Encryption implementation found"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "⚠️ Encryption implementation not clearly visible"
          SOC2_WARNINGS="$SOC2_WARNINGS\n⚠️ Encryption implementation not clearly visible"
        fi
        
        # Check for monitoring and logging
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking monitoring and logging systems..."
        if find yalla_london/app -name "*.ts" -exec grep -l "monitor\|log\|alert\|metric" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Monitoring and logging systems found"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "⚠️ Monitoring and logging systems not clearly implemented"
          SOC2_WARNINGS="$SOC2_WARNINGS\n⚠️ Monitoring systems not clearly implemented"
        fi
        
        # Check for incident response procedures
        SOC2_CHECKS_TOTAL=$((SOC2_CHECKS_TOTAL + 1))
        echo "📋 Checking incident response procedures..."
        if find . -name "*.md" -exec grep -l "incident\|response\|emergency\|disaster" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Incident response procedures documented"
          SOC2_CHECKS_PASSED=$((SOC2_CHECKS_PASSED + 1))
        else
          echo "⚠️ Incident response procedures not documented"
          SOC2_WARNINGS="$SOC2_WARNINGS\n⚠️ Incident response procedures not documented"
        fi
        
        echo "SOC2_CHECKS_PASSED=$SOC2_CHECKS_PASSED" >> $GITHUB_ENV
        echo "SOC2_CHECKS_TOTAL=$SOC2_CHECKS_TOTAL" >> $GITHUB_ENV
        
        if [ -n "$SOC2_WARNINGS" ]; then
          echo "SOC2_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$SOC2_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$SOC2_ERRORS" ]; then
          echo "SOC2_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$SOC2_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo "✓ SOC2 compliance checks completed ($SOC2_CHECKS_PASSED/$SOC2_CHECKS_TOTAL passed)"

    - name: Validate Documentation with comprehensive review
      run: |
        set -e
        echo "📋 Validating compliance documentation..."
        
        DOC_WARNINGS=""
        DOC_ERRORS=""
        DOC_CHECKS_PASSED=0
        DOC_CHECKS_TOTAL=0
        
        # Check enterprise playbook exists and has compliance sections
        DOC_CHECKS_TOTAL=$((DOC_CHECKS_TOTAL + 1))
        if [ -f "docs/enterprise-playbook.md" ]; then
          echo "✅ Enterprise playbook found"
          DOC_CHECKS_PASSED=$((DOC_CHECKS_PASSED + 1))
          
          # Check for required compliance documentation sections
          REQUIRED_SECTIONS=("GDPR" "SOC2" "audit" "retention" "backup" "disaster")
          MISSING_SECTIONS=""
          
          for section in "${REQUIRED_SECTIONS[@]}"; do
            DOC_CHECKS_TOTAL=$((DOC_CHECKS_TOTAL + 1))
            if grep -i "$section" docs/enterprise-playbook.md > /dev/null; then
              echo "✅ Documentation section found: $section"
              DOC_CHECKS_PASSED=$((DOC_CHECKS_PASSED + 1))
            else
              echo "⚠️ Missing documentation for: $section"
              MISSING_SECTIONS="$MISSING_SECTIONS $section"
            fi
          done
          
          if [ -n "$MISSING_SECTIONS" ]; then
            DOC_WARNINGS="$DOC_WARNINGS\n⚠️ Missing documentation sections:$MISSING_SECTIONS"
          fi
        else
          echo "❌ Enterprise playbook not found"
          DOC_ERRORS="$DOC_ERRORS\n❌ Enterprise playbook not found"
        fi
        
        # Check for security documentation
        DOC_CHECKS_TOTAL=$((DOC_CHECKS_TOTAL + 1))
        if find docs/ -name "*.md" -exec grep -l "security\|vulnerability\|threat" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ Security documentation found"
          DOC_CHECKS_PASSED=$((DOC_CHECKS_PASSED + 1))
        else
          echo "⚠️ Security documentation not found"
          DOC_WARNINGS="$DOC_WARNINGS\n⚠️ Security documentation not found"
        fi
        
        # Check for API documentation
        DOC_CHECKS_TOTAL=$((DOC_CHECKS_TOTAL + 1))
        if find . -name "*.md" -exec grep -l "API\|endpoint\|route" {} \; 2>/dev/null | head -1 | grep -q .; then
          echo "✅ API documentation found"
          DOC_CHECKS_PASSED=$((DOC_CHECKS_PASSED + 1))
        else
          echo "⚠️ API documentation not comprehensive"
          DOC_WARNINGS="$DOC_WARNINGS\n⚠️ API documentation not comprehensive"
        fi
        
        echo "DOC_CHECKS_PASSED=$DOC_CHECKS_PASSED" >> $GITHUB_ENV
        echo "DOC_CHECKS_TOTAL=$DOC_CHECKS_TOTAL" >> $GITHUB_ENV
        
        if [ -n "$DOC_WARNINGS" ]; then
          echo "DOC_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "$DOC_WARNINGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        if [ -n "$DOC_ERRORS" ]; then
          echo "DOC_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$DOC_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo "✓ Documentation validation completed ($DOC_CHECKS_PASSED/$DOC_CHECKS_TOTAL passed)"
        
    - name: Add compliance summary
      if: always()
      run: |
        echo "## 📋 Compliance Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔍 Compliance Checks Overview" >> $GITHUB_STEP_SUMMARY
        echo "| Framework | Passed | Total | Score | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # GDPR compliance
        GDPR_SCORE=$(echo "scale=0; ${GDPR_CHECKS_PASSED:-0} * 100 / ${GDPR_CHECKS_TOTAL:-1}" | bc 2>/dev/null || echo "0")
        if [ "${GDPR_CHECKS_PASSED:-0}" -eq "${GDPR_CHECKS_TOTAL:-1}" ]; then
          echo "| GDPR | ${GDPR_CHECKS_PASSED} | ${GDPR_CHECKS_TOTAL} | ${GDPR_SCORE}% | ✅ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${GDPR_CHECKS_PASSED:-0}" -gt $((${GDPR_CHECKS_TOTAL:-1} / 2)) ]; then
          echo "| GDPR | ${GDPR_CHECKS_PASSED} | ${GDPR_CHECKS_TOTAL} | ${GDPR_SCORE}% | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| GDPR | ${GDPR_CHECKS_PASSED} | ${GDPR_CHECKS_TOTAL} | ${GDPR_SCORE}% | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # SOC2 compliance
        SOC2_SCORE=$(echo "scale=0; ${SOC2_CHECKS_PASSED:-0} * 100 / ${SOC2_CHECKS_TOTAL:-1}" | bc 2>/dev/null || echo "0")
        if [ "${SOC2_CHECKS_PASSED:-0}" -eq "${SOC2_CHECKS_TOTAL:-1}" ]; then
          echo "| SOC2 | ${SOC2_CHECKS_PASSED} | ${SOC2_CHECKS_TOTAL} | ${SOC2_SCORE}% | ✅ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${SOC2_CHECKS_PASSED:-0}" -gt $((${SOC2_CHECKS_TOTAL:-1} / 2)) ]; then
          echo "| SOC2 | ${SOC2_CHECKS_PASSED} | ${SOC2_CHECKS_TOTAL} | ${SOC2_SCORE}% | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| SOC2 | ${SOC2_CHECKS_PASSED} | ${SOC2_CHECKS_TOTAL} | ${SOC2_SCORE}% | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Documentation compliance
        DOC_SCORE=$(echo "scale=0; ${DOC_CHECKS_PASSED:-0} * 100 / ${DOC_CHECKS_TOTAL:-1}" | bc 2>/dev/null || echo "0")
        if [ "${DOC_CHECKS_PASSED:-0}" -eq "${DOC_CHECKS_TOTAL:-1}" ]; then
          echo "| Documentation | ${DOC_CHECKS_PASSED} | ${DOC_CHECKS_TOTAL} | ${DOC_SCORE}% | ✅ |" >> $GITHUB_STEP_SUMMARY
        elif [ "${DOC_CHECKS_PASSED:-0}" -gt $((${DOC_CHECKS_TOTAL:-1} / 2)) ]; then
          echo "| Documentation | ${DOC_CHECKS_PASSED} | ${DOC_CHECKS_TOTAL} | ${DOC_SCORE}% | ⚠️ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Documentation | ${DOC_CHECKS_PASSED} | ${DOC_CHECKS_TOTAL} | ${DOC_SCORE}% | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Errors section
        if [ -n "${GDPR_ERRORS:-}${SOC2_ERRORS:-}${DOC_ERRORS:-}" ]; then
          echo "### ❌ Critical Compliance Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${GDPR_ERRORS:-}" ]; then
            echo "**GDPR Issues:**" >> $GITHUB_STEP_SUMMARY
            echo "${GDPR_ERRORS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${SOC2_ERRORS:-}" ]; then
            echo "**SOC2 Issues:**" >> $GITHUB_STEP_SUMMARY
            echo "${SOC2_ERRORS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${DOC_ERRORS:-}" ]; then
            echo "**Documentation Issues:**" >> $GITHUB_STEP_SUMMARY
            echo "${DOC_ERRORS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Warnings section
        if [ -n "${GDPR_WARNINGS:-}${SOC2_WARNINGS:-}${DOC_WARNINGS:-}" ]; then
          echo "### ⚠️ Compliance Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${GDPR_WARNINGS:-}" ]; then
            echo "**GDPR Warnings:**" >> $GITHUB_STEP_SUMMARY
            echo "${GDPR_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${SOC2_WARNINGS:-}" ]; then
            echo "**SOC2 Warnings:**" >> $GITHUB_STEP_SUMMARY
            echo "${SOC2_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${DOC_WARNINGS:-}" ]; then
            echo "**Documentation Warnings:**" >> $GITHUB_STEP_SUMMARY
            echo "${DOC_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "### 📋 Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Implement missing GDPR controls (data retention, consent tracking)" >> $GITHUB_STEP_SUMMARY
        echo "- Enhance SOC2 controls (access control, audit logging, backup procedures)" >> $GITHUB_STEP_SUMMARY
        echo "- Complete documentation for all compliance frameworks" >> $GITHUB_STEP_SUMMARY
        echo "- Regular compliance audits and control testing" >> $GITHUB_STEP_SUMMARY

  detect-security-failures:
    name: Detect Security Failures
    runs-on: ubuntu-latest
    needs: [sast-security-scan, rbac-security-tests, dependency-audit, compliance-check, dast-security-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect security failures and create issues
      id: security-failure-detector
      uses: ./.github/actions/failure-detector
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        workflow-name: 'Security and Compliance Automation'
        run-id: ${{ github.run_id }}
        critical-jobs: 'sast-security-scan,rbac-security-tests,dependency-audit,compliance-check,dast-security-scan'
        
    - name: Add security job summary
      run: |
        echo "## 🔒 Security Failure Detection Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow:** Security and Compliance Automation" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.security-failure-detector.outputs.issue-created }}" == "true" ]; then
          echo "🚨 **Security failure/skip detected!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Issue created:** ${{ steps.security-failure-detector.outputs.issue-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Important:** Security issues require immediate attention!" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **No security failures or skips detected**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security jobs completed successfully." >> $GITHUB_STEP_SUMMARY
        fi

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-security-scan, rbac-security-tests, dependency-audit, compliance-check, detect-security-failures]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Security Summary
      run: |
        echo "## 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "### Test Results:" >> security-summary.md
        echo "- SAST Security Scan: ${{ needs.sast-security-scan.result }}" >> security-summary.md
        echo "- RBAC Security Tests: ${{ needs.rbac-security-tests.result }}" >> security-summary.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-summary.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
        echo "- Failure Detection: ${{ needs.detect-security-failures.result }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "### Recommendations:" >> security-summary.md
        
        if [ "${{ needs.sast-security-scan.result }}" != "success" ]; then
          echo "- 🔴 Review SAST scan results and fix identified vulnerabilities" >> security-summary.md
        fi
        
        if [ "${{ needs.dependency-audit.result }}" != "success" ]; then
          echo "- 🔴 Update dependencies with security vulnerabilities" >> security-summary.md
        fi
        
        if [ "${{ needs.rbac-security-tests.result }}" != "success" ]; then
          echo "- 🔴 Fix RBAC permission issues" >> security-summary.md
        fi
        
        if [ "${{ needs.detect-security-failures.result }}" != "success" ]; then
          echo "- 🔴 Check failure detection logs for critical security issues" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "For detailed results, check the individual job artifacts." >> security-summary.md

    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 90