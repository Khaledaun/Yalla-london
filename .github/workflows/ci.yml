name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.17.0'
  APP_DIR: 'yalla_london/app'
  DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/test_db' }}
  DIRECT_URL: ${{ secrets.DIRECT_URL || 'postgresql://postgres:postgres@localhost:5432/test_db' }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'test-secret-key-for-ci-builds-only-32-chars' }}

jobs:
  lint-and-typecheck:
    name: Lint & TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies with comprehensive validation
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies with comprehensive validation..."
          
          # Check for conflicting package managers
          if [ -f "package-lock.json" ]; then
            echo "‚ö†Ô∏è package-lock.json found - removing to prevent Yarn conflicts"
            rm -f package-lock.json
          fi
          
          # Validate package.json integrity
          echo "üîç Validating package.json integrity..."
          if ! jq empty package.json; then
            echo "‚ùå package.json is not valid JSON"
            exit 1
          fi
          
          # Check critical dependencies are listed
          echo "üîç Validating critical dependencies..."
          MISSING_DEPS=""
          
          # Test dependencies
          if ! jq -e '.dependencies.jest or .devDependencies.jest' package.json >/dev/null; then
            MISSING_DEPS="$MISSING_DEPS\n- jest (testing framework)"
          fi
          
          if ! jq -e '.dependencies."@testing-library/react" or .devDependencies."@testing-library/react"' package.json >/dev/null; then
            MISSING_DEPS="$MISSING_DEPS\n- @testing-library/react (React testing utilities)"
          fi
          
          # Security dependencies
          if ! jq -e '.devDependencies."eslint-plugin-security"' package.json >/dev/null; then
            MISSING_DEPS="$MISSING_DEPS\n- eslint-plugin-security (security linting)"
          fi
          
          # Database dependencies
          if ! jq -e '.dependencies."@prisma/client" or .devDependencies.prisma' package.json >/dev/null; then
            MISSING_DEPS="$MISSING_DEPS\n- Prisma (database toolkit)"
          fi
          
          if [ -n "$MISSING_DEPS" ]; then
            echo "‚ùå Critical dependencies missing from package.json:"
            echo -e "$MISSING_DEPS"
            echo ""
            echo "üí° Add these dependencies to package.json before running CI"
            exit 1
          fi
          
          echo "‚úÖ All critical dependencies are listed in package.json"
          
          # Install dependencies with enhanced error handling
          echo "üì¶ Installing dependencies..."
          if ! yarn install --frozen-lockfile --network-timeout 300000 2>&1 | tee install.log; then
            echo "‚ùå yarn install failed"
            echo "üìã Install log:"
            cat install.log
            echo ""
            echo "üí° Common fixes:"
            echo "   - Run 'yarn install' locally to update yarn.lock"
            echo "   - Check for package conflicts or version incompatibilities"
            echo "   - Ensure all peer dependencies are satisfied"
            exit 1
          fi
          
          # Validate installation success
          echo "üîç Validating installation success..."
          if ! yarn list jest @testing-library/react eslint-plugin-security >/dev/null 2>&1; then
            echo "‚ùå Critical packages not installed correctly"
            echo "üìã Checking package availability:"
            yarn list jest @testing-library/react eslint-plugin-security || true
            exit 1
          fi
          
          echo "‚úÖ Dependencies installed and validated successfully"
        
      - name: Validate file integrity
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Validating file integrity..."
          
          # Check for accidentally committed files
          UNWANTED_FILES=""
          
          # Check for coverage files
          if find . -name "coverage" -type d -not -path "./node_modules/*" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- Coverage directories found (should be in .gitignore)"
          fi
          
          # Check for coverage report files
          if find . \( -name "*.lcov" -o -name "coverage-*.json" -o -name "clover.xml" -o -name "junit.xml" -o -name "test-results.xml" -o -name "*.coverage" \) -not -path "./node_modules/*" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- Coverage/test report files found (should be in .gitignore)"
          fi
          
          # Check for IDE files
          if find . \( -name ".vscode" -o -name ".idea" \) -type d -not -path "./node_modules/*" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- IDE configuration directories found"
          fi
          
          # Check for temp files (excluding legitimate build artifacts)
          if find . \( -name "*.tmp" -o -name "*.temp" \) -not -path "./node_modules/*" -not -path "./.next/*" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- Temporary files found"
          fi
          
          # Check for log files (excluding legitimate CI build logs)
          if find . -name "*.log" -not -path "./node_modules/*" -not -path "./.next/*" -not -name "install.log" -not -name "typescript-check.log" -not -name "schema-validate.log" -not -name "schema-warnings.log" -not -name "npm-audit-report.log" -not -name "yarn-audit-report.log" -not -name "eslint-security-report.log" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- Unexpected log files found (excluding CI build logs)"
          fi
          
          # Check for environment files (except .env.example)
          if find . \( -name ".env" -o -name ".env.local" -o -name ".env.development" -o -name ".env.production" \) -not -path "./node_modules/*" | head -1 | grep -q .; then
            UNWANTED_FILES="$UNWANTED_FILES\n- Environment files found (may contain secrets)"
          fi
          
          if [ -n "$UNWANTED_FILES" ]; then
            echo "‚ùå File validation failed:"
            echo -e "$UNWANTED_FILES"
            echo ""
            echo "Please remove these files and update .gitignore if necessary"
            exit 1
          fi
          
          echo "‚úÖ File integrity validation passed"
        
      - name: Run TypeScript check
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Running TypeScript compilation check..."
          
          # Run TypeScript check with detailed output
          if ! yarn tsc --noEmit --pretty 2>&1 | tee typescript-check.log; then
            echo "‚ùå TypeScript compilation failed"
            echo "üìã Error details:"
            cat typescript-check.log
            exit 1
          fi
          
          echo "‚úÖ TypeScript check passed"
        
      - name: Run ESLint
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Running ESLint code quality checks..."
          
          # Run ESLint with detailed output and error handling
          ESLINT_EXIT_CODE=0
          yarn lint --format=stylish --max-warnings=10 2>&1 | tee eslint-report.log || ESLINT_EXIT_CODE=$?
          
          if [ $ESLINT_EXIT_CODE -ne 0 ]; then
            echo "‚ùå ESLint found issues"
            echo "üìã Lint report:"
            cat eslint-report.log
            
            # Check if it's warnings vs errors
            if grep -q "error" eslint-report.log; then
              echo "üö´ ESLint errors found - build cannot continue"
              exit 1
            else
              echo "‚ö†Ô∏è ESLint warnings found - build will continue with warnings"
              echo "ESLINT_WARNINGS=true" >> $GITHUB_ENV
            fi
          else
            echo "‚úÖ ESLint check passed"
            echo "ESLINT_WARNINGS=false" >> $GITHUB_ENV
          fi
        
      - name: Validate Prisma schema
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üóÑÔ∏è Validating Prisma schema..."
          
          # Check if Prisma schema exists
          if [ ! -f "prisma/schema.prisma" ]; then
            echo "‚ùå Prisma schema not found at prisma/schema.prisma"
            exit 1
          fi
          
          # Validate Prisma schema
          if ! yarn prisma validate --schema prisma/schema.prisma 2>&1 | tee prisma-validate.log; then
            echo "‚ùå Prisma schema validation failed"
            echo "üìã Validation errors:"
            cat prisma-validate.log
            exit 1
          fi
          
          echo "‚úÖ Prisma schema validation passed"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          
      - name: Check Prisma binary availability
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Checking Prisma binary availability..."
          
          # Check if Prisma is available
          if command -v prisma >/dev/null 2>&1; then
            echo "‚úÖ Prisma CLI is available"
            yarn prisma --version
          else
            echo "‚ö†Ô∏è Prisma CLI not found globally, checking local installation..."
            if [ -f "node_modules/.bin/prisma" ]; then
              echo "‚úÖ Prisma found in node_modules"
              yarn prisma --version
            else
              echo "‚ùå Prisma not found - this may cause issues in later steps"
              exit 1
            fi
          fi
          
      - name: Add job summary
        if: always()
        run: |
          echo "## üîç Lint & TypeScript Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # File validation
          if [ "${{ job.status }}" == "success" ] || [ -z "${{ job.status }}" ]; then
            echo "| File Integrity | ‚úÖ | No unwanted files found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| File Integrity | ‚ùå | Issues found - check logs |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # TypeScript check
          if [ -f "${{ env.APP_DIR }}/typescript-check.log" ]; then
            if grep -q "error" "${{ env.APP_DIR }}/typescript-check.log"; then
              echo "| TypeScript | ‚ùå | Compilation errors found |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| TypeScript | ‚úÖ | No compilation errors |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| TypeScript | ‚úÖ | Check completed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ESLint check
          if [ "${ESLINT_WARNINGS:-false}" == "true" ]; then
            echo "| ESLint | ‚ö†Ô∏è | Warnings found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ‚úÖ | No issues found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Prisma validation
          echo "| Prisma Schema | ‚úÖ | Schema valid |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  migration-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
        run: |
          set -e
          echo "üì¶ Installing dependencies..."
          
          # Check for conflicting package managers
          if [ -f "package-lock.json" ]; then
            echo "‚ö†Ô∏è package-lock.json found - removing to prevent Yarn conflicts"
            rm -f package-lock.json
          fi
          
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Validate Prisma binary and environment
        working-directory: ${{ env.APP_DIR }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
        run: |
          set -e
          echo "üîß Validating Prisma binary and environment setup..."
          
          # Check if Prisma binary is available
          if ! command -v npx >/dev/null 2>&1; then
            echo "‚ùå npx not available"
            exit 1
          fi
          
          # Check Prisma CLI access
          echo "üîç Checking Prisma CLI availability..."
          if ! npx prisma --version 2>&1 | tee prisma-version.log; then
            echo "‚ùå Prisma CLI not accessible"
            echo "üìã Error details:"
            cat prisma-version.log
            
            # Check for firewall/allowlist issues
            if grep -q "ENOTFOUND\|ECONNREFUSED\|getaddrinfo" prisma-version.log; then
              echo "üö´ Network connectivity issue detected - possible firewall/allowlist problem"
              echo "üí° Add binaries.prisma.sh to allowlist or configure network access"
            fi
            exit 1
          fi
          
          echo "‚úÖ Prisma CLI accessible"
          
          # Validate environment variables for migration check
          echo "üîê Validating migration environment variables..."
          
          if [ -z "$SHADOW_DATABASE_URL" ]; then
            echo "‚ö†Ô∏è SHADOW_DATABASE_URL not configured - migration diff will be skipped"
            echo "üí° Configure SHADOW_DATABASE_URL in secrets for migration validation"
            echo "MIGRATION_DIFF_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "‚úÖ SHADOW_DATABASE_URL configured"
            echo "MIGRATION_DIFF_AVAILABLE=true" >> $GITHUB_ENV
            
            # Test shadow database connectivity
            echo "üóÑÔ∏è Testing shadow database connectivity..."
            if ! timeout 30 npx prisma db execute --schema prisma/schema.prisma --stdin <<< "SELECT 1;" 2>/dev/null; then
              echo "‚ö†Ô∏è Shadow database connection test failed - proceeding with limited validation"
              echo "MIGRATION_DIFF_AVAILABLE=false" >> $GITHUB_ENV
            else
              echo "‚úÖ Shadow database connection successful"
            fi
          fi
          
      - name: Generate Prisma client with enhanced firewall and binary validation
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Generating Prisma client with enhanced firewall and binary validation..."
          
          # Check Prisma binary allowlist requirements
          echo "üîç Validating Prisma binary access requirements..."
          
          # Test basic network connectivity to Prisma CDN
          if ! curl -s --max-time 10 https://binaries.prisma.sh >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Cannot reach binaries.prisma.sh - this may indicate firewall restrictions"
            echo "üí° Required URLs for Prisma binary downloads:"
            echo "   - https://binaries.prisma.sh/*"
            echo "   - https://releases.prisma.io/*"
            echo "   - https://registry.npmjs.org/*"
            echo ""
            echo "üîß If running in restricted environment, add these URLs to allowlist:"
            echo "   1. binaries.prisma.sh (all paths)"
            echo "   2. releases.prisma.io (all paths)" 
            echo "   3. registry.npmjs.org/@prisma/* (package metadata)"
            echo ""
            echo "‚ö†Ô∏è Proceeding with generation attempt..."
          else
            echo "‚úÖ Prisma CDN access confirmed"
          fi
          
          # Check if Prisma CLI is available
          if ! command -v prisma >/dev/null 2>&1 && ! yarn prisma --version >/dev/null 2>&1; then
            echo "‚ùå Prisma CLI not available"
            echo "üí° Ensure 'prisma' is listed in package.json devDependencies"
            exit 1
          fi
          
          # Add retry logic and network error detection
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if yarn prisma generate --schema prisma/schema.prisma 2>&1 | tee prisma-generate.log; then
              echo "‚úÖ Prisma client generated successfully"
              
              # Validate generation success
              if [ -d "node_modules/@prisma/client" ]; then
                echo "‚úÖ Prisma client directory created"
              else
                echo "‚ö†Ô∏è Prisma client directory not found, but generation reported success"
              fi
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è Prisma generation attempt $RETRY_COUNT failed"
              
              # Enhanced error analysis
              if grep -q "ENOTFOUND\|ECONNREFUSED\|ETIMEDOUT\|ECONNRESET" prisma-generate.log; then
                echo "üö´ Network connectivity issue detected during Prisma generation"
                echo "üîç Error details:"
                grep -E "ENOTFOUND|ECONNREFUSED|ETIMEDOUT|ECONNRESET" prisma-generate.log || true
                echo ""
                echo "üí° This indicates firewall/allowlist restrictions. Required access:"
                echo "   - Allow outbound HTTPS (port 443) to:"
                echo "     * binaries.prisma.sh"
                echo "     * releases.prisma.io" 
                echo "     * registry.npmjs.org"
                echo "   - Allow DNS resolution for these domains"
                echo ""
                
                if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                  echo "‚ùå Failed to generate Prisma client due to network restrictions"
                  echo "üîß ACTION REQUIRED: Add Prisma binary URLs to firewall allowlist"
                  echo "   1. Configure firewall to allow binaries.prisma.sh"
                  echo "   2. Ensure DNS resolution works for Prisma domains"
                  echo "   3. Allow outbound HTTPS traffic on port 443"
                  exit 1
                fi
              elif grep -q "EACCES\|permission denied" prisma-generate.log; then
                echo "üö´ Permission error detected"
                echo "üí° This may indicate file system permission issues"
              elif grep -q "ENOSPC" prisma-generate.log; then
                echo "üö´ Disk space error detected"
                echo "üí° Insufficient disk space for Prisma generation"
              else
                echo "üö´ Unknown error during Prisma generation"
                echo "üìã Full error log:"
                cat prisma-generate.log
              fi
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Prisma generation failed after $MAX_RETRIES attempts"
                echo "üìã Final error log:"
                cat prisma-generate.log
                exit 1
              fi
            fi
          done
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          
      - name: Check for migration changes with enhanced validation
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Checking for database schema changes..."
          
          MIGRATION_WARNINGS=""
          MIGRATION_INFO=""
          
          if [ "${MIGRATION_DIFF_AVAILABLE:-false}" == "true" ] && [ -n "$SHADOW_DATABASE_URL" ]; then
            echo "üìä Running migration diff against shadow database..."
            
            # Run migration diff with error handling
            if npx prisma migrate diff \
              --from-schema-datamodel prisma/schema.prisma \
              --to-schema-datasource "$SHADOW_DATABASE_URL" \
              --script > migration_diff.sql 2>&1; then
                
              if [ -s migration_diff.sql ]; then
                echo "üìã Migration changes detected:"
                echo "----------------------------------------"
                cat migration_diff.sql
                echo "----------------------------------------"
                echo ""
                echo "‚ö†Ô∏è  IMPORTANT: Migrations are NOT deployed in pull requests"
                echo "üìù Please review the migration changes above before merging"
                echo ""
                
                # Analyze migration for potential issues
                if grep -qi "drop\|delete\|truncate" migration_diff.sql; then
                  MIGRATION_WARNINGS="$MIGRATION_WARNINGS\n‚ö†Ô∏è Destructive operations detected (DROP/DELETE/TRUNCATE)"
                fi
                
                if grep -qi "alter.*not null" migration_diff.sql; then
                  MIGRATION_WARNINGS="$MIGRATION_WARNINGS\n‚ö†Ô∏è NOT NULL constraints added - ensure data compatibility"
                fi
                
                if grep -qi "create.*index\|drop.*index" migration_diff.sql; then
                  MIGRATION_INFO="$MIGRATION_INFO\n‚ÑπÔ∏è Index changes detected - may affect performance"
                fi
                
                # Count lines of changes
                CHANGE_LINES=$(wc -l < migration_diff.sql)
                echo "üìä Migration complexity: $CHANGE_LINES lines of SQL changes"
                
                echo "MIGRATION_CHANGES=true" >> $GITHUB_ENV
                echo "MIGRATION_LINES=$CHANGE_LINES" >> $GITHUB_ENV
                
                if [ -n "$MIGRATION_WARNINGS" ]; then
                  echo "MIGRATION_WARNINGS<<EOF" >> $GITHUB_ENV
                  echo -e "$MIGRATION_WARNINGS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
                fi
                
                if [ -n "$MIGRATION_INFO" ]; then
                  echo "MIGRATION_INFO<<EOF" >> $GITHUB_ENV
                  echo -e "$MIGRATION_INFO" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
                fi
              else
                echo "‚úÖ No migration changes detected"
                echo "MIGRATION_CHANGES=false" >> $GITHUB_ENV
              fi
            else
              echo "‚ùå Migration diff failed"
              echo "üìã Error details:"
              cat migration_diff.sql
              echo "MIGRATION_DIFF_ERROR=true" >> $GITHUB_ENV
            fi
          else
            echo "‚ö†Ô∏è SHADOW_DATABASE_URL not configured - skipping migration diff"
            echo "üí° To enable migration validation:"
            echo "   1. Set up a shadow database"
            echo "   2. Add SHADOW_DATABASE_URL to repository secrets"
            echo "   3. Ensure network access to database"
            echo "MIGRATION_CHANGES=skipped" >> $GITHUB_ENV
          fi
          
      - name: Validate schema syntax
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Validating Prisma schema syntax..."
          
          # Additional schema validation
          if ! npx prisma validate --schema prisma/schema.prisma 2>&1 | tee schema-validate.log; then
            echo "‚ùå Schema validation failed"
            echo "üìã Validation errors:"
            cat schema-validate.log
            exit 1
          fi
          
          echo "‚úÖ Schema validation passed"
          
          # Check for schema best practices
          echo "üìã Checking schema best practices..."
          
          SCHEMA_WARNINGS=""
          
          # Check for missing @id or @@id
          grep -E "^model " prisma/schema.prisma | while read -r line; do
            model_name=$(echo "$line" | awk '{print $2}')
            if ! grep -A 20 "^model $model_name" prisma/schema.prisma | grep -q "@id\|@@id"; then
              echo "‚ö†Ô∏è Model $model_name may be missing primary key"
            fi
          done | tee schema-warnings.log
          
          if [ -s schema-warnings.log ]; then
            SCHEMA_WARNINGS=$(cat schema-warnings.log)
            echo "SCHEMA_WARNINGS<<EOF" >> $GITHUB_ENV
            echo "$SCHEMA_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
          
      - name: Add migration check summary
        if: always()
        run: |
          echo "## üóÑÔ∏è Database Migration Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Migration status
          echo "### Migration Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Prisma binary access
          echo "| Prisma Binary | ‚úÖ | CLI accessible |" >> $GITHUB_STEP_SUMMARY
          
          # Schema validation
          if [ "${{ job.status }}" == "success" ] || [ -z "${{ job.status }}" ]; then
            echo "| Schema Validation | ‚úÖ | Schema syntax valid |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Schema Validation | ‚ùå | Check logs for errors |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Migration diff
          if [ "${MIGRATION_CHANGES:-}" == "true" ]; then
            echo "| Migration Changes | ‚ö†Ô∏è | ${MIGRATION_LINES:-Unknown} lines of changes detected |" >> $GITHUB_STEP_SUMMARY
          elif [ "${MIGRATION_CHANGES:-}" == "false" ]; then
            echo "| Migration Changes | ‚úÖ | No changes detected |" >> $GITHUB_STEP_SUMMARY
          elif [ "${MIGRATION_CHANGES:-}" == "skipped" ]; then
            echo "| Migration Changes | ‚è≠Ô∏è | Skipped (no shadow database) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Migration Changes | ‚ùì | Unable to determine |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Migration warnings
          if [ -n "${MIGRATION_WARNINGS:-}" ]; then
            echo "### ‚ö†Ô∏è Migration Warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${MIGRATION_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Migration info
          if [ -n "${MIGRATION_INFO:-}" ]; then
            echo "### ‚ÑπÔ∏è Migration Notes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${MIGRATION_INFO}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Schema warnings
          if [ -n "${SCHEMA_WARNINGS:-}" ]; then
            echo "### üìã Schema Best Practice Notes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${SCHEMA_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üîí Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Migrations are **NOT** deployed during pull request validation" >> $GITHUB_STEP_SUMMARY
          echo "- Migration deployment only occurs on main branch merge" >> $GITHUB_STEP_SUMMARY
          echo "- Review all migration changes carefully before merging" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload migration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-check-${{ github.run_id }}
          path: |
            ${{ env.APP_DIR }}/migration_diff.sql
            ${{ env.APP_DIR }}/prisma-generate.log
            ${{ env.APP_DIR }}/schema-validate.log
            ${{ env.APP_DIR }}/schema-warnings.log
          retention-days: 30

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies..."
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Validate environment variables
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîê Validating environment variables for build..."
          
          # Check required environment variables
          MISSING_VARS=""
          
          if [ -z "$DATABASE_URL" ]; then
            MISSING_VARS="$MISSING_VARS\n- DATABASE_URL"
          fi
          
          if [ -z "$DIRECT_URL" ]; then
            MISSING_VARS="$MISSING_VARS\n- DIRECT_URL"
          fi
          
          if [ -z "$NEXTAUTH_SECRET" ]; then
            MISSING_VARS="$MISSING_VARS\n- NEXTAUTH_SECRET"
          fi
          
          if [ -n "$MISSING_VARS" ]; then
            echo "‚ùå Missing required environment variables:"
            echo -e "$MISSING_VARS"
            exit 1
          fi
          
          echo "‚úÖ Environment variables validation passed"
          
          # Test database connectivity
          echo "üóÑÔ∏è Testing database connectivity..."
          if ! timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'; then
            echo "‚ùå Database connection failed"
            exit 1
          fi
          echo "‚úÖ Database connection successful"
          
      - name: Initialize database with required roles and permissions
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üóÑÔ∏è Initializing database with required roles and permissions..."
          
          # Install PostgreSQL client if not available
          if ! command -v psql >/dev/null 2>&1; then
            echo "üì¶ Installing PostgreSQL client..."
            sudo apt-get update -qq
            sudo apt-get install -y postgresql-client
          fi
          
          # Wait for database to be fully ready
          echo "‚è≥ Waiting for database to be fully ready..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          
          # Create required roles and users
          echo "üë• Creating required database roles and users..."
          
          # Ensure postgres user has full permissions
          psql "$DATABASE_URL" -c "
            GRANT ALL PRIVILEGES ON DATABASE test_db TO postgres;
            ALTER USER postgres CREATEDB;
          " || echo "‚ÑπÔ∏è Postgres user permissions already configured"
          
          # Test basic database operations
          echo "üîç Testing basic database operations..."
          
          # Test connection with both users
          if psql "$DATABASE_URL" -c "SELECT 1 as test;" >/dev/null; then
            echo "‚úÖ Database connection test passed"
          else
            echo "‚ùå Database connection test failed"
            exit 1
          fi
          
          # Test database creation permissions
          if psql "$DATABASE_URL" -c "CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY); DROP TABLE IF EXISTS test_table;" >/dev/null; then
            echo "‚úÖ Database write permissions test passed"
          else
            echo "‚ùå Database write permissions test failed"
            exit 1
          fi
          
          echo "‚úÖ Database initialization completed successfully"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          
      - name: Generate Prisma client with error handling
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Generating Prisma client..."
          
          # Add retry logic for Prisma generation
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if yarn prisma generate --schema prisma/schema.prisma 2>&1 | tee prisma-generate.log; then
              echo "‚úÖ Prisma client generated successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è Prisma generation attempt $RETRY_COUNT failed"
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "üîÑ Retrying in 5 seconds..."
                sleep 5
              else
                echo "‚ùå Prisma generation failed after $MAX_RETRIES attempts"
                echo "üìã Error details:"
                cat prisma-generate.log
                exit 1
              fi
            fi
          done
          
      - name: Build application with error handling
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üèóÔ∏è Building Next.js application..."
          
          # Set build start time
          BUILD_START=$(date +%s)
          
          # Build with detailed output
          if ! yarn build 2>&1 | tee build.log; then
            echo "‚ùå Build failed"
            echo "üìã Build error details:"
            cat build.log
            
            # Check for common build issues
            if grep -q "out of memory" build.log; then
              echo "üíæ Build failed due to memory issues"
            elif grep -q "ENOENT" build.log; then
              echo "üìÅ Build failed due to missing files"
            elif grep -q "TypeScript error" build.log; then
              echo "üîß Build failed due to TypeScript errors"
            fi
            
            exit 1
          fi
          
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          
          echo "‚úÖ Build completed successfully in ${BUILD_TIME}s"
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          
          # Check build size
          if [ -d ".next" ]; then
            BUILD_SIZE=$(du -sh .next | cut -f1)
            echo "üì¶ Build size: $BUILD_SIZE"
            echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: "http://localhost:3000"
          AWS_BUCKET_NAME: "test-bucket"
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_REGION: "us-east-1"
          ABACUSAI_API_KEY: "test"
          FEATURE_SEO: "0"
          FEATURE_EMBEDS: "0"
          FEATURE_MEDIA: "0"
          FEATURE_HOMEPAGE_BUILDER: "0"
          
      - name: Run test suite with coverage
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üß™ Running test suite with coverage..."
          
          # Initialize test tracking
          TEST_WARNINGS=""
          COVERAGE_WARNINGS=""
          
          # Run tests with coverage
          if ! yarn test --coverage --passWithNoTests --watchAll=false --ci --verbose 2>&1 | tee test-results.log; then
            echo "‚ùå Test suite failed"
            echo "üìã Test failure details:"
            cat test-results.log
            exit 1
          fi
          
          echo "‚úÖ Test suite completed"
          
          # Check coverage results
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "üìä Analyzing coverage results..."
            
            # Extract coverage percentages
            LINES_PCT=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct // 0')
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct // 0')
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct // 0')
            
            echo "Coverage Results:"
            echo "- Lines: ${LINES_PCT}%"
            echo "- Functions: ${FUNCTIONS_PCT}%"
            echo "- Branches: ${BRANCHES_PCT}%"
            echo "- Statements: ${STATEMENTS_PCT}%"
            
            # Set environment variables for summary
            echo "COVERAGE_LINES=${LINES_PCT}" >> $GITHUB_ENV
            echo "COVERAGE_FUNCTIONS=${FUNCTIONS_PCT}" >> $GITHUB_ENV
            echo "COVERAGE_BRANCHES=${BRANCHES_PCT}" >> $GITHUB_ENV
            echo "COVERAGE_STATEMENTS=${STATEMENTS_PCT}" >> $GITHUB_ENV
            
            # Check thresholds with different levels for different test types
            echo "üîç Checking coverage thresholds..."
            
            # Determine test type based on test files
            RBAC_SECURITY_TESTS=false
            if find tests/ -name "*rbac*" -o -name "*security*" -o -name "*auth*" 2>/dev/null | head -1 | grep -q .; then
              RBAC_SECURITY_TESTS=true
              echo "‚ÑπÔ∏è RBAC/Security tests detected - using stricter thresholds"
            fi
            
            # Set thresholds based on test type
            if [ "$RBAC_SECURITY_TESTS" = "true" ]; then
              COVERAGE_THRESHOLD=90  # Stricter for security/RBAC
              THRESHOLD_TYPE="RBAC/Security"
            else
              COVERAGE_THRESHOLD=70  # Standard for regular code
              THRESHOLD_TYPE="Standard"
            fi
            
            echo "üìä Using $THRESHOLD_TYPE coverage threshold: ${COVERAGE_THRESHOLD}%"
            
            # Check thresholds and warn (don't fail)
            if (( $(echo "$LINES_PCT < $COVERAGE_THRESHOLD" | bc -l) )); then
              COVERAGE_WARNINGS="$COVERAGE_WARNINGS\n- Lines coverage (${LINES_PCT}%) below $THRESHOLD_TYPE threshold (${COVERAGE_THRESHOLD}%)"
            fi
            if (( $(echo "$FUNCTIONS_PCT < $COVERAGE_THRESHOLD" | bc -l) )); then
              COVERAGE_WARNINGS="$COVERAGE_WARNINGS\n- Functions coverage (${FUNCTIONS_PCT}%) below $THRESHOLD_TYPE threshold (${COVERAGE_THRESHOLD}%)"
            fi
            if (( $(echo "$BRANCHES_PCT < $COVERAGE_THRESHOLD" | bc -l) )); then
              COVERAGE_WARNINGS="$COVERAGE_WARNINGS\n- Branches coverage (${BRANCHES_PCT}%) below $THRESHOLD_TYPE threshold (${COVERAGE_THRESHOLD}%)"
            fi
            if (( $(echo "$STATEMENTS_PCT < $COVERAGE_THRESHOLD" | bc -l) )); then
              COVERAGE_WARNINGS="$COVERAGE_WARNINGS\n- Statements coverage (${STATEMENTS_PCT}%) below $THRESHOLD_TYPE threshold (${COVERAGE_THRESHOLD}%)"
            fi
            
            # Store threshold info for summary
            echo "COVERAGE_THRESHOLD=$COVERAGE_THRESHOLD" >> $GITHUB_ENV
            echo "THRESHOLD_TYPE=$THRESHOLD_TYPE" >> $GITHUB_ENV
            
            if [ -n "$COVERAGE_WARNINGS" ]; then
              echo "‚ö†Ô∏è Coverage warnings (build will continue):"
              echo -e "$COVERAGE_WARNINGS"
              echo "COVERAGE_WARNINGS=true" >> $GITHUB_ENV
              echo "COVERAGE_DETAILS<<EOF" >> $GITHUB_ENV
              echo -e "$COVERAGE_WARNINGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "‚úÖ All coverage thresholds met"
              echo "COVERAGE_WARNINGS=false" >> $GITHUB_ENV
            fi
          else
            echo "‚ö†Ô∏è Coverage report not found - tests may not have run with coverage"
            echo "COVERAGE_WARNINGS=true" >> $GITHUB_ENV
            echo "COVERAGE_DETAILS=Coverage report not generated" >> $GITHUB_ENV
          fi
          
      - name: Add job summary
        if: always()
        run: |
          echo "## üèóÔ∏è Build & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build information
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${BUILD_TIME:-Unknown}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | ${BUILD_SIZE:-Unknown} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage information
          if [ "${COVERAGE_LINES:-}" != "" ]; then
            echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Lines coverage
            if (( $(echo "${COVERAGE_LINES:-0} >= 70" | bc -l) )); then
              echo "| Lines | ${COVERAGE_LINES}% | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Lines | ${COVERAGE_LINES}% | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Functions coverage
            if (( $(echo "${COVERAGE_FUNCTIONS:-0} >= 70" | bc -l) )); then
              echo "| Functions | ${COVERAGE_FUNCTIONS}% | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Functions | ${COVERAGE_FUNCTIONS}% | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Branches coverage
            if (( $(echo "${COVERAGE_BRANCHES:-0} >= 70" | bc -l) )); then
              echo "| Branches | ${COVERAGE_BRANCHES}% | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Branches | ${COVERAGE_BRANCHES}% | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Statements coverage
            if (( $(echo "${COVERAGE_STATEMENTS:-0} >= 70" | bc -l) )); then
              echo "| Statements | ${COVERAGE_STATEMENTS}% | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Statements | ${COVERAGE_STATEMENTS}% | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${COVERAGE_WARNINGS:-false}" == "true" ]; then
              echo "### ‚ö†Ô∏è Coverage Warnings" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "${COVERAGE_DETAILS:-No specific details}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "> **Note:** Coverage warnings do not fail the build but should be addressed." >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            ${{ env.APP_DIR }}/coverage/
            ${{ env.APP_DIR }}/test-results.log
            ${{ env.APP_DIR }}/build.log
          retention-days: 7
          
      - name: Upload coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: ${{ env.APP_DIR }}/coverage/
          retention-days: 30

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: yarn install --frozen-lockfile
        
      - name: Generate Prisma client
        working-directory: ${{ env.APP_DIR }}
        run: yarn prisma generate
        
      - name: Build application
        working-directory: ${{ env.APP_DIR }}
        run: yarn build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          DIRECT_URL: "postgresql://test:test@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret-key-for-ci-builds-only-32-chars"
          NEXTAUTH_URL: "http://localhost:3000"
          AWS_BUCKET_NAME: "test-bucket"
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_REGION: "us-east-1"
          ABACUSAI_API_KEY: "test"
          # Performance optimization flags for Lighthouse CI
          FEATURE_ANALYTICS_ENABLED: "false"
          FEATURE_SOCIAL_EMBEDS: "false"
          FEATURE_ADVANCED_ANIMATIONS: "false"
          FEATURE_AUTO_PUBLISHING: "false"
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Configure Lighthouse CI for staging
        working-directory: ${{ env.APP_DIR }}
        run: |
          cat > .lighthouserc-enterprise.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: [
                  process.env.LHCI_URL_STAGING || 'http://localhost:3000',
                  (process.env.LHCI_URL_STAGING || 'http://localhost:3000') + '/blog',
                  (process.env.LHCI_URL_STAGING || 'http://localhost:3000') + '/recommendations',
                  // Skip auth-gated pages in CI
                  // (process.env.LHCI_URL_STAGING || 'http://localhost:3000') + '/admin'
                ],
                startServerCommand: process.env.LHCI_URL_STAGING ? undefined : 'yarn start',
                numberOfRuns: 3
              },
              assert: {
                // Balanced thresholds for luxury content platform with rich visuals
                assertions: {
                  // Performance: Lower threshold for content-heavy pages, maintain quality
                  'categories:performance': ['warn', {minScore: 0.75}],
                  // Accessibility: Maintain high standards with slight flexibility  
                  'categories:accessibility': ['error', {minScore: 0.85}], 
                  // Best practices: Realistic threshold for modern web apps
                  'categories:best-practices': ['warn', {minScore: 0.85}],
                  // SEO: Maintain high standards for discoverability
                  'categories:seo': ['error', {minScore: 0.9}],
                  'categories:pwa': 'off'
                }
              },
              upload: {
                target: 'temporary-public-storage'
              }
            }
          }
          EOF
        
      - name: Run Lighthouse CI
        working-directory: ${{ env.APP_DIR }}
        run: lhci autorun --config=.lighthouserc-enterprise.js
        env:
          LHCI_URL_STAGING: ${{ secrets.LHCI_URL_STAGING }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deploy-migrations:
    name: Deploy Database Migrations
    runs-on: ubuntu-latest
    needs: [build-and-test, lint-and-typecheck]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies..."
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Validate production environment
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîê Validating production environment for migration deployment..."
          
          # Check critical environment variables
          MISSING_VARS=""
          
          if [ -z "$DATABASE_URL" ]; then
            MISSING_VARS="$MISSING_VARS\n- DATABASE_URL (production database)"
          fi
          
          if [ -z "$DIRECT_URL" ]; then
            echo "‚ö†Ô∏è DIRECT_URL not set, using DATABASE_URL"
          fi
          
          if [ -n "$MISSING_VARS" ]; then
            echo "‚ùå Missing critical environment variables for production:"
            echo -e "$MISSING_VARS"
            echo "üö´ Cannot proceed with migration deployment"
            exit 1
          fi
          
          echo "‚úÖ Production environment variables validated"
          
          # Test database connectivity with timeout
          echo "üóÑÔ∏è Testing production database connectivity..."
          
          # Extract database host for connectivity test
          DB_HOST=$(echo "$DATABASE_URL" | sed -n 's/.*@\([^:]*\):.*/\1/p')
          DB_PORT=$(echo "$DATABASE_URL" | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
          
          echo "Testing connection to $DB_HOST:$DB_PORT..."
          
          if ! timeout 30 bash -c "echo > /dev/tcp/$DB_HOST/$DB_PORT" 2>/dev/null; then
            echo "‚ùå Cannot connect to production database"
            echo "üîß Check network connectivity and database availability"
            exit 1
          fi
          
          echo "‚úÖ Production database connectivity confirmed"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          
      - name: Generate Prisma client for production
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Generating Prisma client for production deployment..."
          
          # Add retry logic for production
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if yarn prisma generate --schema prisma/schema.prisma 2>&1 | tee prisma-generate-prod.log; then
              echo "‚úÖ Prisma client generated successfully for production"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è Prisma generation attempt $RETRY_COUNT failed"
              
              # Check for network issues
              if grep -q "ENOTFOUND\|ECONNREFUSED\|ETIMEDOUT" prisma-generate-prod.log; then
                echo "üö´ Network issue during Prisma generation"
                if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                  echo "‚ùå Failed to generate Prisma client for production"
                  echo "üîß Add binaries.prisma.sh to firewall allowlist"
                  exit 1
                fi
              fi
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Prisma generation failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
      - name: Check migration status before deployment
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üìã Checking current migration status..."
          
          # Get current migration status
          if yarn prisma migrate status --schema prisma/schema.prisma 2>&1 | tee migration-status.log; then
            echo "‚úÖ Migration status check completed"
            
            # Parse status for pending migrations
            if grep -q "Database schema is up to date" migration-status.log; then
              echo "‚ÑπÔ∏è Database schema is already up to date"
              echo "MIGRATIONS_NEEDED=false" >> $GITHUB_ENV
            elif grep -q "pending migration" migration-status.log; then
              echo "üìä Pending migrations found"
              echo "MIGRATIONS_NEEDED=true" >> $GITHUB_ENV
              
              # Count pending migrations
              PENDING_COUNT=$(grep -c "pending migration" migration-status.log || echo 0)
              echo "PENDING_MIGRATIONS=$PENDING_COUNT" >> $GITHUB_ENV
              echo "üìä Found $PENDING_COUNT pending migration(s)"
            else
              echo "‚ö†Ô∏è Migration status unclear - proceeding with deployment"
              echo "MIGRATIONS_NEEDED=true" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå Failed to check migration status"
            echo "üìã Status check error:"
            cat migration-status.log
            exit 1
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          
      - name: Create migration backup point
        if: env.MIGRATIONS_NEEDED == 'true'
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üíæ Creating migration backup point..."
          
          # Create a backup identifier
          BACKUP_ID="pre-migration-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          echo "BACKUP_ID=$BACKUP_ID" >> $GITHUB_ENV
          
          echo "üìù Backup identifier: $BACKUP_ID"
          echo "üí° Use this identifier if rollback is needed"
          
          # Log current schema state
          if yarn prisma db execute --schema prisma/schema.prisma --stdin <<< "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public';" > schema-before.log 2>&1; then
            echo "üìä Schema state recorded before migration"
            cat schema-before.log
          else
            echo "‚ö†Ô∏è Could not record schema state - proceeding anyway"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          
      - name: Deploy migrations to production database
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üöÄ Deploying migrations to production database..."
          
          # Record deployment start time
          DEPLOY_START=$(date +%s)
          
          # Deploy migrations with enhanced logging
          if yarn prisma migrate deploy --schema prisma/schema.prisma 2>&1 | tee migration-deploy.log; then
            DEPLOY_END=$(date +%s)
            DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
            
            echo "‚úÖ Migration deployment completed successfully in ${DEPLOY_TIME}s"
            echo "MIGRATION_SUCCESS=true" >> $GITHUB_ENV
            echo "MIGRATION_DEPLOY_TIME=${DEPLOY_TIME}" >> $GITHUB_ENV
            
            # Verify deployment
            echo "üîç Verifying migration deployment..."
            if yarn prisma migrate status --schema prisma/schema.prisma 2>&1 | tee migration-verify.log; then
              if grep -q "Database schema is up to date" migration-verify.log; then
                echo "‚úÖ Migration verification successful - schema is up to date"
                echo "MIGRATION_VERIFIED=true" >> $GITHUB_ENV
              else
                echo "‚ö†Ô∏è Migration verification shows unexpected status"
                echo "MIGRATION_VERIFIED=false" >> $GITHUB_ENV
              fi
            else
              echo "‚ö†Ô∏è Migration verification failed"
              echo "MIGRATION_VERIFIED=false" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå Migration deployment failed"
            echo "üìã Deployment error details:"
            cat migration-deploy.log
            echo "MIGRATION_SUCCESS=false" >> $GITHUB_ENV
            
            # Check for common migration errors
            if grep -q "already exists" migration-deploy.log; then
              echo "üîç Error type: Resource already exists"
            elif grep -q "does not exist" migration-deploy.log; then
              echo "üîç Error type: Missing resource"
            elif grep -q "timeout" migration-deploy.log; then
              echo "üîç Error type: Database timeout"
            elif grep -q "connection" migration-deploy.log; then
              echo "üîç Error type: Connection issue"
            fi
            
            echo "üö® CRITICAL: Migration deployment failed in production"
            echo "üîß Manual intervention may be required"
            exit 1
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          
      - name: Post-migration validation
        if: env.MIGRATION_SUCCESS == 'true'
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Running post-migration validation..."
          
          # Test basic database operations
          echo "üóÑÔ∏è Testing basic database operations..."
          
          # Test connection and basic query
          if yarn prisma db execute --schema prisma/schema.prisma --stdin <<< "SELECT 1 as test;" > test-query.log 2>&1; then
            echo "‚úÖ Database connection and basic queries working"
          else
            echo "‚ùå Database connection test failed after migration"
            cat test-query.log
            exit 1
          fi
          
          # Check critical tables exist (adjust based on your schema)
          echo "üìä Validating critical table structure..."
          if yarn prisma db execute --schema prisma/schema.prisma --stdin <<< "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;" > tables-after.log 2>&1; then
            echo "‚úÖ Table structure validation completed"
            echo "üìã Current tables:"
            cat tables-after.log
          else
            echo "‚ö†Ô∏è Could not validate table structure"
          fi
          
          # Generate fresh client to ensure everything works
          echo "üîß Testing Prisma client generation post-migration..."
          if yarn prisma generate --schema prisma/schema.prisma > /dev/null 2>&1; then
            echo "‚úÖ Prisma client generation successful post-migration"
          else
            echo "‚ùå Prisma client generation failed after migration"
            exit 1
          fi
          
          echo "‚úÖ Post-migration validation completed successfully"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          
      - name: Add migration deployment summary
        if: always()
        run: |
          echo "## üöÄ Migration Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment information
          echo "### üìä Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Commit SHA | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Time | ${MIGRATION_DEPLOY_TIME:-Unknown}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Backup ID | ${BACKUP_ID:-N/A} |" >> $GITHUB_STEP_SUMMARY
          echo "| Migrations Needed | ${MIGRATIONS_NEEDED:-Unknown} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${PENDING_MIGRATIONS:-0}" -gt 0 ]; then
            echo "| Pending Migrations | ${PENDING_MIGRATIONS} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status table
          echo "### üîç Migration Status" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Environment validation
          echo "| Environment | ‚úÖ | Production variables validated |" >> $GITHUB_STEP_SUMMARY
          
          # Migration deployment
          if [ "${MIGRATION_SUCCESS:-false}" == "true" ]; then
            echo "| Deployment | ‚úÖ | Migrations deployed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Deployment | ‚ùå | Migration deployment failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Verification
          if [ "${MIGRATION_VERIFIED:-false}" == "true" ]; then
            echo "| Verification | ‚úÖ | Schema up to date |" >> $GITHUB_STEP_SUMMARY
          elif [ "${MIGRATION_VERIFIED:-false}" == "false" ]; then
            echo "| Verification | ‚ö†Ô∏è | Verification issues detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Verification | ‚è≠Ô∏è | Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Success/failure details
          if [ "${MIGRATION_SUCCESS:-false}" == "true" ]; then
            echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "- All migrations deployed to production" >> $GITHUB_STEP_SUMMARY
            echo "- Database schema verified as up to date" >> $GITHUB_STEP_SUMMARY
            echo "- Post-migration validation completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "- Migration deployment encountered errors" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs for detailed error information" >> $GITHUB_STEP_SUMMARY
            echo "- Manual intervention may be required" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${BACKUP_ID:-}" ]; then
              echo "- Backup identifier for rollback: \`${BACKUP_ID}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload migration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-deployment-${{ github.run_id }}
          path: |
            ${{ env.APP_DIR }}/migration-status.log
            ${{ env.APP_DIR }}/migration-deploy.log
            ${{ env.APP_DIR }}/migration-verify.log
            ${{ env.APP_DIR }}/schema-before.log
            ${{ env.APP_DIR }}/tables-after.log
            ${{ env.APP_DIR }}/test-query.log
          retention-days: 90

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies..."
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Run dependency vulnerability scan
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Running dependency vulnerability scan..."
          
          # Initialize tracking variables
          VULNERABILITY_WARNINGS=""
          CRITICAL_VULNS=0
          HIGH_VULNS=0
          MODERATE_VULNS=0
          LOW_VULNS=0
          
          # Run yarn audit with detailed output
          echo "üìä Running yarn audit..."
          if yarn audit --json > yarn-audit.json 2>&1; then
            echo "‚úÖ Yarn audit completed without high-severity issues"
          else
            AUDIT_EXIT_CODE=$?
            echo "‚ö†Ô∏è Yarn audit found vulnerabilities (exit code: $AUDIT_EXIT_CODE)"
            
            # Parse audit results if available
            if [ -f yarn-audit.json ]; then
              echo "üìã Parsing vulnerability report..."
              
              # Count vulnerabilities by severity
              if command -v jq >/dev/null 2>&1; then
                CRITICAL_VULNS=$(cat yarn-audit.json | jq '[.data.vulnerabilities.critical // 0] | add // 0' 2>/dev/null || echo 0)
                HIGH_VULNS=$(cat yarn-audit.json | jq '[.data.vulnerabilities.high // 0] | add // 0' 2>/dev/null || echo 0)
                MODERATE_VULNS=$(cat yarn-audit.json | jq '[.data.vulnerabilities.moderate // 0] | add // 0' 2>/dev/null || echo 0)
                LOW_VULNS=$(cat yarn-audit.json | jq '[.data.vulnerabilities.low // 0] | add // 0' 2>/dev/null || echo 0)
              fi
              
              echo "Vulnerability Summary:"
              echo "- Critical: $CRITICAL_VULNS"
              echo "- High: $HIGH_VULNS"
              echo "- Moderate: $MODERATE_VULNS"
              echo "- Low: $LOW_VULNS"
              
              # Determine action based on severity
              if [ "$CRITICAL_VULNS" -gt 0 ]; then
                echo "‚ùå Critical vulnerabilities found - this is a security concern"
                VULNERABILITY_WARNINGS="$VULNERABILITY_WARNINGS\nüö® $CRITICAL_VULNS critical vulnerabilities detected"
              fi
              
              if [ "$HIGH_VULNS" -gt 5 ]; then
                echo "‚ö†Ô∏è Many high-severity vulnerabilities found"
                VULNERABILITY_WARNINGS="$VULNERABILITY_WARNINGS\n‚ö†Ô∏è $HIGH_VULNS high-severity vulnerabilities detected"
              elif [ "$HIGH_VULNS" -gt 0 ]; then
                echo "‚ö†Ô∏è High-severity vulnerabilities found: $HIGH_VULNS"
                VULNERABILITY_WARNINGS="$VULNERABILITY_WARNINGS\n‚ö†Ô∏è $HIGH_VULNS high-severity vulnerabilities detected"
              fi
            fi
            
            # Fail build only on critical vulnerabilities
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "üö® BUILD WARNING: Critical vulnerabilities detected."
              echo "üí° Consider updating dependencies or applying security patches"
              exit 1
            fi
          fi
          
          # Set environment variables for summary
          echo "CRITICAL_VULNS=$CRITICAL_VULNS" >> $GITHUB_ENV
          echo "HIGH_VULNS=$HIGH_VULNS" >> $GITHUB_ENV
          echo "MODERATE_VULNS=$MODERATE_VULNS" >> $GITHUB_ENV
          echo "LOW_VULNS=$LOW_VULNS" >> $GITHUB_ENV
          
          if [ -n "$VULNERABILITY_WARNINGS" ]; then
            echo "VULNERABILITY_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$VULNERABILITY_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Dependency vulnerability scan completed"
        
      - name: Check for secrets and sensitive data
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Scanning for potential secrets in codebase..."
          
          SECRET_WARNINGS=""
          SECRETS_FOUND=false
          
          # Check for API keys and tokens
          echo "üîë Checking for API keys and tokens..."
          if grep -rE "(sk-[a-zA-Z0-9]{20,}|pk_[a-zA-Z0-9]{20,}|AIza[0-9A-Za-z_-]{35}|ya29\.[0-9A-Za-z_-]+)" \
               --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.json" \
               --exclude-dir=node_modules --exclude-dir=.next . > potential-secrets.log 2>/dev/null; then
            echo "‚ùå Found potential API keys/secrets in code!"
            echo "üìã Potential secrets found:"
            cat potential-secrets.log
            SECRET_WARNINGS="$SECRET_WARNINGS\nüö® Potential API keys/secrets found in code"
            SECRETS_FOUND=true
          fi
          
          # Check for hardcoded credentials
          echo "üîê Checking for hardcoded credentials..."
          CRED_RESULTS=$(grep -rE "(password|secret|token|credential)\s*[:=]\s*['\"][^'\"]{8,}" \
               --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
               --exclude-dir=node_modules --exclude-dir=.next . | \
               grep -v ".example" | \
               grep -v "test-secret" | \
               grep -v "@types" | \
               grep -v "_API_KEY" | \
               grep -v "_SECRET_KEY" | \
               grep -v "_ACCESS_TOKEN" | \
               grep -v "_CLIENT_KEY" | \
               grep -v "console.error" | \
               grep -v "key.*labelEn" | \
               grep -v "key.*href" | \
               grep -v "key.*ENABLED" | head -10) || true
          
          if [ -n "$CRED_RESULTS" ]; then
            echo "‚ùå Found potential hardcoded credentials!"
            echo "üìã Potential credentials:"
            echo "$CRED_RESULTS"
            SECRET_WARNINGS="$SECRET_WARNINGS\n‚ö†Ô∏è Potential hardcoded credentials found"
            # Don't set SECRETS_FOUND=true for credentials as they might be false positives
          fi
          
          # Check for environment files
          echo "üìÅ Checking for committed environment files..."
          if find . -name ".env" -o -name ".env.local" -o -name ".env.production" \
               -not -path "./node_modules/*" -not -path "./.next/*" | grep -q .; then
            echo "‚ö†Ô∏è Environment files found in repository"
            find . -name ".env*" -not -path "./node_modules/*" -not -path "./.next/*" -not -name ".env.example"
            SECRET_WARNINGS="$SECRET_WARNINGS\n‚ö†Ô∏è Environment files committed to repository"
          fi
          
          # Set environment variables for summary
          echo "SECRETS_FOUND=$SECRETS_FOUND" >> $GITHUB_ENV
          
          if [ -n "$SECRET_WARNINGS" ]; then
            echo "SECRET_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$SECRET_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          if [ "$SECRETS_FOUND" == "true" ]; then
            echo "‚ùå Critical security issue: Secrets found in code"
            echo "üîß Action required: Remove secrets and use environment variables"
            exit 1
          else
            echo "‚úÖ No critical secrets detected in codebase"
          fi
          
      - name: Run additional security checks
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üõ°Ô∏è Running additional security checks..."
          
          SECURITY_WARNINGS=""
          
          # Check for unsafe dependencies
          echo "üì¶ Checking for known unsafe packages..."
          UNSAFE_PACKAGES="node-sass@<4.14.1|lodash@<4.17.19|yargs-parser@<18.1.2"
          
          if grep -E "$UNSAFE_PACKAGES" package.json yarn.lock 2>/dev/null; then
            echo "‚ö†Ô∏è Potentially unsafe package versions detected"
            SECURITY_WARNINGS="$SECURITY_WARNINGS\n‚ö†Ô∏è Potentially unsafe package versions found"
          fi
          
          # Check for eval usage
          echo "üîç Checking for eval() usage..."
          if grep -r "eval(" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
               --exclude-dir=node_modules --exclude-dir=.next . > eval-usage.log 2>/dev/null; then
            echo "‚ö†Ô∏è eval() usage found - potential security risk"
            echo "üìã eval() usage locations:"
            cat eval-usage.log
            SECURITY_WARNINGS="$SECURITY_WARNINGS\n‚ö†Ô∏è eval() usage detected - review for security implications"
          fi
          
          # Check for innerHTML usage
          echo "üîç Checking for potentially unsafe innerHTML usage..."
          if grep -r "innerHTML\s*=" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
               --exclude-dir=node_modules --exclude-dir=.next . > innerhtml-usage.log 2>/dev/null; then
            echo "‚ö†Ô∏è innerHTML usage found - review for XSS potential"
            SECURITY_WARNINGS="$SECURITY_WARNINGS\n‚ö†Ô∏è innerHTML usage detected - review for XSS risks"
          fi
          
          # Check TypeScript strict mode
          echo "üîß Checking TypeScript strict mode configuration..."
          if ! grep -q '"strict":\s*true' tsconfig.json; then
            echo "‚ö†Ô∏è TypeScript strict mode not enabled"
            SECURITY_WARNINGS="$SECURITY_WARNINGS\n‚ö†Ô∏è TypeScript strict mode disabled - may allow unsafe code"
          fi
          
          if [ -n "$SECURITY_WARNINGS" ]; then
            echo "SECURITY_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$SECURITY_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Additional security checks completed"
          
      - name: Add security scan summary
        if: always()
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Vulnerability summary table
          echo "### üõ°Ô∏è Vulnerability Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Critical vulnerabilities
          if [ "${CRITICAL_VULNS:-0}" -gt 0 ]; then
            echo "| Critical | ${CRITICAL_VULNS} | üö® |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Critical | 0 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # High vulnerabilities
          if [ "${HIGH_VULNS:-0}" -gt 5 ]; then
            echo "| High | ${HIGH_VULNS} | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
          elif [ "${HIGH_VULNS:-0}" -gt 0 ]; then
            echo "| High | ${HIGH_VULNS} | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| High | 0 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Moderate vulnerabilities
          echo "| Moderate | ${MODERATE_VULNS:-0} | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY
          
          # Low vulnerabilities
          echo "| Low | ${LOW_VULNS:-0} | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security checks table
          echo "### üîç Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${SECRETS_FOUND:-false}" == "true" ]; then
            echo "| Secrets Scan | ‚ùå | Secrets found in code |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secrets Scan | ‚úÖ | No secrets detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| Dependency Scan | ‚úÖ | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ‚úÖ | Additional checks passed |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Warnings section
          if [ -n "${VULNERABILITY_WARNINGS:-}${SECRET_WARNINGS:-}${SECURITY_WARNINGS:-}" ]; then
            echo "### ‚ö†Ô∏è Security Warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${VULNERABILITY_WARNINGS:-}" ]; then
              echo "**Vulnerability Warnings:**" >> $GITHUB_STEP_SUMMARY
              echo "${VULNERABILITY_WARNINGS}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${SECRET_WARNINGS:-}" ]; then
              echo "**Secret/Credential Warnings:**" >> $GITHUB_STEP_SUMMARY
              echo "${SECRET_WARNINGS}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${SECURITY_WARNINGS:-}" ]; then
              echo "**Additional Security Warnings:**" >> $GITHUB_STEP_SUMMARY
              echo "${SECURITY_WARNINGS}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "### üìã Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly update dependencies to patch vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Use environment variables for all secrets and credentials" >> $GITHUB_STEP_SUMMARY
          echo "- Enable TypeScript strict mode for better type safety" >> $GITHUB_STEP_SUMMARY
          echo "- Review and validate all external dependencies" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ github.run_id }}
          path: |
            ${{ env.APP_DIR }}/yarn-audit.json
            ${{ env.APP_DIR }}/potential-secrets.log
            ${{ env.APP_DIR }}/eval-usage.log
            ${{ env.APP_DIR }}/innerhtml-usage.log
          retention-days: 30

  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: yarn install --frozen-lockfile
        
      - name: Generate Prisma client
        working-directory: ${{ env.APP_DIR }}
        run: yarn prisma generate
        
      - name: Build application
        working-directory: ${{ env.APP_DIR }}
        run: yarn build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: "http://localhost:3000"
          AWS_BUCKET_NAME: "test-bucket"
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_REGION: "us-east-1"
          ABACUSAI_API_KEY: "test"
          FEATURE_SEO: "1"  # Enable SEO for full testing
          
      - name: Start application for testing
        working-directory: ${{ env.APP_DIR }}
        run: |
          yarn start &
          echo $! > server.pid
          sleep 15
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: Run integration tests
        working-directory: ${{ env.APP_DIR }}
        run: |
          echo "üß™ Running integration tests..."
          if [ -f "scripts/test-integrations.js" ]; then
            node scripts/test-integrations.js
          else
            echo "‚ö†Ô∏è Integration test script not found - skipping"
          fi
          
      - name: Test JSON-LD schemas
        run: |
          echo "üîç Testing JSON-LD schemas..."
          curl -s http://localhost:3000/ | grep -o '"@type":[^,}]*' || echo "‚ö†Ô∏è Schema validation skipped (no sample data)"
          echo "‚úÖ Schema validation tests completed"
          
      - name: Stop application
        working-directory: ${{ env.APP_DIR }}
        run: kill $(cat server.pid) || true

  enterprise-compliance:
    name: Enterprise Compliance Check
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify enterprise documentation
        run: |
          echo "üìã Checking enterprise compliance..."
          test -f docs/enterprise-playbook.md && echo "‚úÖ Enterprise playbook found" || echo "‚ùå Enterprise playbook missing"
          test -f ${{ env.APP_DIR }}/ENVIRONMENT-VARIABLES.md && echo "‚úÖ Environment variables documentation found" || echo "‚ùå Environment variables documentation missing"
          test -f ${{ env.APP_DIR }}/PRISMA-MIGRATIONS.md && echo "‚úÖ Migration documentation found" || echo "‚ùå Migration documentation missing"
          
      - name: Check required environment variables documentation
        run: |
          echo "üîê Checking environment variables documentation..."
          if grep -q "DATABASE_URL" ${{ env.APP_DIR }}/ENVIRONMENT-VARIABLES.md; then
            echo "‚úÖ Database URL documented"
          else
            echo "‚ùå Database URL not documented"
          fi
          
          if grep -q "SHADOW_DATABASE_URL" docs/enterprise-playbook.md || grep -q "SHADOW_DATABASE_URL" ${{ env.APP_DIR }}/ENVIRONMENT-VARIABLES.md; then
            echo "‚úÖ Shadow database URL documented"
          else
            echo "‚ö†Ô∏è Shadow database URL not documented"
          fi

  detect-failures:
    name: Detect CI/CD Failures
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-and-test, security-scan, enterprise-compliance, migration-check, lighthouse-ci, deploy-migrations, full-test-suite]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect critical failures and create issues
        id: failure-detector
        uses: ./.github/actions/failure-detector
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          workflow-name: 'Enterprise CI/CD Pipeline'
          run-id: ${{ github.run_id }}
          critical-jobs: 'lint-and-typecheck,build-and-test,security-scan,enterprise-compliance,migration-check,deploy-migrations,full-test-suite'
          
      - name: Add job summary
        run: |
          echo "## üîç CI/CD Failure Detection Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** Enterprise CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.failure-detector.outputs.issue-created }}" == "true" ]; then
            echo "üö® **Critical failure/skip detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìù **Issue created:** ${{ steps.failure-detector.outputs.issue-url }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the issue for details and next steps." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No critical failures or skips detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All critical jobs completed successfully or as expected." >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    name: Notify Pipeline Completion
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-and-test, security-scan, enterprise-compliance, detect-failures]
    if: always()
    
    steps:
      - name: Pipeline completion summary
        run: |
          echo "üéØ Enterprise CI/CD Pipeline Summary"
          echo "=================================="
          
          if [ "${{ needs.lint-and-typecheck.result }}" == "success" ]; then
            echo "‚úÖ Lint & TypeScript Check: PASSED"
          else
            echo "‚ùå Lint & TypeScript Check: FAILED"
          fi
          
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "‚úÖ Build & Test: PASSED"
          else
            echo "‚ùå Build & Test: FAILED"
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ Security Scan: PASSED"
          else
            echo "‚ùå Security Scan: FAILED"
          fi
          
          if [ "${{ needs.enterprise-compliance.result }}" == "success" ]; then
            echo "‚úÖ Enterprise Compliance: PASSED"
          else
            echo "‚ùå Enterprise Compliance: FAILED"
          fi
          
          echo ""
          if [ "${{ needs.detect-failures.result }}" == "success" ]; then
            echo "üîç Failure Detection: COMPLETED"
          else
            echo "‚ö†Ô∏è Failure Detection: ERROR"
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo ""
            echo "üìã Pull Request Workflow:"
            echo "  - Migration diff checked (no deployment)"
            echo "  - Lighthouse CI executed on staging URL"
            echo "  - Auth-gated pages skipped in Lighthouse"
            echo "  - Critical failure detection enabled"
          else
            echo ""
            echo "üöÄ Main Branch Workflow:"
            echo "  - Full test suite executed"
            echo "  - Database migrations deployed"
            echo "  - Production-ready build validated"
            echo "  - Critical failure detection enabled"
          fi