name: Security and Compliance Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  sast-security-scan:
    name: SAST - Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies
      working-directory: yalla_london/app
      run: yarn install --frozen-lockfile

    - name: Run ESLint Security Scan
      working-directory: yalla_london/app
      run: |
        yarn add --dev eslint-plugin-security
        npx eslint . --ext .ts,.tsx,.js,.jsx --config .eslintrc.json --format json --output-file eslint-security-report.json || true

    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=yalla_london/app/package.json --severity-threshold=medium --json-file-output=snyk-report.json
      continue-on-error: true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: sast-security-reports
        path: |
          yalla_london/app/eslint-security-report.json
          snyk-report.json
        retention-days: 30

  rbac-security-tests:
    name: RBAC Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies
      working-directory: yalla_london/app
      run: yarn install --frozen-lockfile

    - name: Run RBAC Security Tests
      working-directory: yalla_london/app
      run: |
        # Run specific security tests
        npx jest tests/rbac.spec.ts tests/security-automation.spec.ts --verbose --coverage --json --outputFile=rbac-test-results.json

    - name: Validate Permission Matrix
      working-directory: yalla_london/app
      run: |
        # Custom script to validate role-permission matrix
        node -e "
        const { ROLES, PERMISSIONS, ROLE_PERMISSIONS } = require('./lib/rbac.ts');
        
        console.log('Validating RBAC permission matrix...');
        
        // Ensure all roles have valid permissions
        Object.keys(ROLES).forEach(roleKey => {
          const role = ROLES[roleKey];
          if (!ROLE_PERMISSIONS[role]) {
            throw new Error(\`Missing permissions for role: \${role}\`);
          }
          console.log(\`✓ Role \${role} has \${ROLE_PERMISSIONS[role].length} permissions\`);
        });
        
        // Ensure admin has all permissions
        const allPermissions = Object.values(PERMISSIONS);
        const adminPermissions = ROLE_PERMISSIONS[ROLES.ADMIN];
        const missingPerms = allPermissions.filter(p => !adminPermissions.includes(p));
        if (missingPerms.length > 0) {
          throw new Error(\`Admin missing permissions: \${missingPerms.join(', ')}\`);
        }
        
        console.log('✓ RBAC validation passed');
        "

    - name: Upload RBAC Test Results
      uses: actions/upload-artifact@v4
      with:
        name: rbac-test-results
        path: yalla_london/app/rbac-test-results.json
        retention-days: 30

  dast-security-scan:
    name: DAST - Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yalla_london/app/yarn.lock'

    - name: Install dependencies and start test server
      working-directory: yalla_london/app
      run: |
        yarn install --frozen-lockfile
        # Create minimal test environment
        cp .env.example .env
        echo "NEXTAUTH_SECRET=test-secret-for-security-scan" >> .env
        echo "DATABASE_URL=sqlite://./test.db" >> .env
        yarn build || echo "Build failed, continuing with dev server"
        
        # Start development server in background
        yarn dev &
        sleep 30 # Wait for server to start

    - name: Run OWASP ZAP Security Scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.conf'
        cmd_options: '-a -j -m 2 -T 15'
        fail_action: false
        allow_issue_writing: false

    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      with:
        name: dast-security-report
        path: report_html.html
        retention-days: 30

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit
      working-directory: yalla_london/app
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        
    - name: Run yarn audit  
      working-directory: yalla_london/app
      run: |
        yarn audit --level moderate --json > yarn-audit-report.json || true

    - name: Check for high/critical vulnerabilities
      working-directory: yalla_london/app
      run: |
        # Check npm audit results
        if [ -f npm-audit-report.json ]; then
          HIGH_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
          
          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "⚠️ Too many high vulnerabilities found!"
            exit 1
          fi
        fi

    - name: Upload Audit Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-reports
        path: |
          yalla_london/app/npm-audit-report.json
          yalla_london/app/yarn-audit-report.json
        retention-days: 30

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check GDPR Compliance
      run: |
        echo "Checking GDPR compliance requirements..."
        
        # Check for data retention policies
        if ! grep -r "retention" docs/ yalla_london/app/lib/; then
          echo "❌ No data retention policies found"
          exit 1
        fi
        
        # Check for audit logging
        if ! find yalla_london/app -name "*.ts" -exec grep -l "logAuditEvent" {} \;; then
          echo "❌ Audit logging not implemented"
          exit 1
        fi
        
        # Check for user consent tracking
        if ! find yalla_london/app -name "*.ts" -exec grep -l "consent\|privacy" {} \;; then
          echo "⚠️ User consent tracking may be missing"
        fi
        
        echo "✓ GDPR compliance checks passed"

    - name: Check SOC2 Controls
      run: |
        echo "Checking SOC2 compliance controls..."
        
        # Check for access control implementation
        if ! find yalla_london/app -name "*.ts" -exec grep -l "withAdminAuth\|rbac" {} \;; then
          echo "❌ Access controls not implemented"
          exit 1
        fi
        
        # Check for audit logging
        if ! find yalla_london/app -name "*.ts" -exec grep -l "AuditLog" {} \;; then
          echo "❌ Audit logging not implemented"
          exit 1
        fi
        
        # Check for backup procedures
        if ! find . -name "*backup*" -o -name "*restore*"; then
          echo "❌ Backup procedures not documented"
          exit 1
        fi
        
        echo "✓ SOC2 compliance checks passed"

    - name: Validate Documentation
      run: |
        echo "Validating compliance documentation..."
        
        # Check enterprise playbook exists and has compliance sections
        if [ ! -f "docs/enterprise-playbook.md" ]; then
          echo "❌ Enterprise playbook not found"
          exit 1
        fi
        
        # Check for required compliance documentation sections
        REQUIRED_SECTIONS=("GDPR" "SOC2" "audit" "retention" "backup" "disaster")
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -i "$section" docs/enterprise-playbook.md > /dev/null; then
            echo "⚠️ Missing documentation for: $section"
          fi
        done
        
        echo "✓ Documentation validation completed"

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-security-scan, rbac-security-tests, dependency-audit, compliance-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Security Summary
      run: |
        echo "## 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "### Test Results:" >> security-summary.md
        echo "- SAST Security Scan: ${{ needs.sast-security-scan.result }}" >> security-summary.md
        echo "- RBAC Security Tests: ${{ needs.rbac-security-tests.result }}" >> security-summary.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-summary.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "### Recommendations:" >> security-summary.md
        
        if [ "${{ needs.sast-security-scan.result }}" != "success" ]; then
          echo "- 🔴 Review SAST scan results and fix identified vulnerabilities" >> security-summary.md
        fi
        
        if [ "${{ needs.dependency-audit.result }}" != "success" ]; then
          echo "- 🔴 Update dependencies with security vulnerabilities" >> security-summary.md
        fi
        
        if [ "${{ needs.rbac-security-tests.result }}" != "success" ]; then
          echo "- 🔴 Fix RBAC permission issues" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "For detailed results, check the individual job artifacts." >> security-summary.md

    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 90