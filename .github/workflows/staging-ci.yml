name: Staging CI/CD Pipeline

on:
  push:
    branches: [ staging, develop ]
  pull_request:
    branches: [ staging ]

env:
  NODE_VERSION: '20.17.0'
  APP_DIR: 'yalla_london/app'
  STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL || 'postgresql://staging:staging@localhost:5432/staging_db' }}
  STAGING_NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL || 'https://staging.example.com' }}
  STAGING_ABACUSAI_API_KEY: ${{ secrets.STAGING_ABACUSAI_API_KEY || secrets.ABACUSAI_API_KEY || 'staging-test-key' }}

jobs:
  staging-lint-and-build:
    name: Staging Build & Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug - Check staging secrets availability
        run: |
          echo "üîê Checking staging secrets availability..."
          echo "STAGING_DATABASE_URL: $([[ -n "${{ secrets.STAGING_DATABASE_URL }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (using fallback)")"
          echo "STAGING_NEXTAUTH_URL: $([[ -n "${{ secrets.STAGING_NEXTAUTH_URL }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (using fallback)")"
          echo "STAGING_ABACUSAI_API_KEY: $([[ -n "${{ secrets.STAGING_ABACUSAI_API_KEY }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (checking fallback)")"
          echo "ABACUSAI_API_KEY (fallback): $([[ -n "${{ secrets.ABACUSAI_API_KEY }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (using test key)")"
          echo "AWS_ACCESS_KEY_ID: $([[ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (using test)")"
          echo "AWS_SECRET_ACCESS_KEY: $([[ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]] && echo "‚úÖ yes" || echo "‚ùå no (using test)")"
          echo ""
          echo "üí° Note: Staging environment allows fallback values for testing."
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies with staging configuration
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies for staging environment..."
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Validate staging environment variables
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîê Validating staging environment configuration..."
          
          # Check for staging-specific configurations
          MISSING_STAGING_VARS=""
          
          if [ -z "$STAGING_DATABASE_URL" ]; then
            echo "‚ö†Ô∏è STAGING_DATABASE_URL not set - using fallback"
            MISSING_STAGING_VARS="$MISSING_STAGING_VARS\n- STAGING_DATABASE_URL"
          fi
          
          if [ -z "$STAGING_NEXTAUTH_URL" ]; then
            echo "‚ö†Ô∏è STAGING_NEXTAUTH_URL not set - using fallback"
            MISSING_STAGING_VARS="$MISSING_STAGING_VARS\n- STAGING_NEXTAUTH_URL"
          fi
          
          if [ -n "$MISSING_STAGING_VARS" ]; then
            echo "‚ö†Ô∏è Missing staging environment variables:"
            echo -e "$MISSING_STAGING_VARS"
            echo "STAGING_CONFIG_WARNINGS=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Staging environment variables validated"
            echo "STAGING_CONFIG_WARNINGS=false" >> $GITHUB_ENV
          fi
        env:
          STAGING_DATABASE_URL: ${{ env.STAGING_DATABASE_URL }}
          STAGING_NEXTAUTH_URL: ${{ env.STAGING_NEXTAUTH_URL }}
          
      - name: Run TypeScript and lint checks for staging
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîß Running TypeScript and lint checks for staging..."
          
          # TypeScript check
          if ! yarn tsc --noEmit --pretty 2>&1 | tee staging-typescript.log; then
            echo "‚ùå TypeScript compilation failed"
            exit 1
          fi
          echo "‚úÖ TypeScript check passed"
          
          # ESLint check with staging-specific configuration
          ESLINT_EXIT_CODE=0
          yarn lint --format=stylish --max-warnings=20 2>&1 | tee staging-eslint.log || ESLINT_EXIT_CODE=$?
          
          if [ $ESLINT_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è ESLint found issues (staging allows more warnings)"
            echo "STAGING_LINT_WARNINGS=true" >> $GITHUB_ENV
          else
            echo "‚úÖ ESLint check passed"
            echo "STAGING_LINT_WARNINGS=false" >> $GITHUB_ENV
          fi
          
      - name: Build application for staging
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üèóÔ∏è Building application for staging environment..."
          
          BUILD_START=$(date +%s)
          
          if ! yarn build 2>&1 | tee staging-build.log; then
            echo "‚ùå Staging build failed"
            echo "üìã Build errors:"
            cat staging-build.log
            exit 1
          fi
          
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          
          echo "‚úÖ Staging build completed in ${BUILD_TIME}s"
          echo "STAGING_BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          
          # Check build artifacts
          if [ -d ".next" ]; then
            BUILD_SIZE=$(du -sh .next | cut -f1)
            echo "üì¶ Staging build size: $BUILD_SIZE"
            echo "STAGING_BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
          fi
        env:
          DATABASE_URL: ${{ env.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ env.STAGING_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET || secrets.NEXTAUTH_SECRET || "staging-secret-key-for-builds-32-chars-minimum" }}
          NEXTAUTH_URL: ${{ env.STAGING_NEXTAUTH_URL }}
          NODE_ENV: "production"
          # Staging AWS credentials with fallbacks
          AWS_BUCKET_NAME: ${{ secrets.STAGING_AWS_BUCKET_NAME || "staging-bucket" }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID || "staging-test" }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY || "staging-test" }}
          AWS_REGION: ${{ secrets.AWS_REGION || "us-east-1" }}
          ABACUSAI_API_KEY: ${{ env.STAGING_ABACUSAI_API_KEY }}
          # Staging-optimized feature flags
          FEATURE_SEO: "1"
          FEATURE_ANALYTICS_ENABLED: "true"
          FEATURE_SOCIAL_EMBEDS: "false"  # Disabled for safety
          FEATURE_AUTO_PUBLISHING: "false"  # Disabled for safety
          
      - name: Add staging build summary
        if: always()
        run: |
          echo "## üé≠ Staging Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üèóÔ∏è Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${STAGING_BUILD_TIME:-Unknown}s | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | ${STAGING_BUILD_SIZE:-Unknown} | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY
          echo "| Job Status | ${{ job.status }} | ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Configuration warnings
          if [ "${STAGING_CONFIG_WARNINGS:-false}" == "true" ]; then
            echo "| Config | Warnings | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Config | Valid | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lint warnings
          if [ "${STAGING_LINT_WARNINGS:-false}" == "true" ]; then
            echo "| Lint | Warnings | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Lint | Clean | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Staging Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Staging builds allow more warnings than production" >> $GITHUB_STEP_SUMMARY
          echo "- Social features and auto-publishing disabled for safety" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration warnings are acceptable in staging" >> $GITHUB_STEP_SUMMARY

  staging-security-check:
    name: Staging Security Check
    runs-on: ubuntu-latest
    needs: staging-lint-and-build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: ${{ env.APP_DIR }}/yarn.lock
          
      - name: Install dependencies
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üì¶ Installing dependencies for staging security check..."
          yarn install --frozen-lockfile --network-timeout 300000
          echo "‚úÖ Dependencies installed successfully"
          
      - name: Run staging security scan
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -e
          echo "üîç Running staging security scan..."
          
          STAGING_SECURITY_WARNINGS=""
          
          # Quick dependency check
          echo "üì¶ Checking dependencies for known vulnerabilities..."
          if yarn audit --level moderate --json > staging-audit.json 2>&1; then
            echo "‚úÖ No moderate+ vulnerabilities found"
          else
            AUDIT_EXIT_CODE=$?
            echo "‚ö†Ô∏è Staging dependency audit found issues (exit code: $AUDIT_EXIT_CODE)"
            STAGING_SECURITY_WARNINGS="$STAGING_SECURITY_WARNINGS\n‚ö†Ô∏è Dependency vulnerabilities found"
          fi
          
          # Check for staging-specific security issues
          echo "üîç Checking for staging environment security..."
          
          # Check for debug flags
          if grep -r "debug.*true\|DEBUG.*true" --include="*.ts" --include="*.js" . 2>/dev/null | head -5; then
            echo "‚ö†Ô∏è Debug flags found - review for staging appropriateness"
            STAGING_SECURITY_WARNINGS="$STAGING_SECURITY_WARNINGS\n‚ö†Ô∏è Debug flags enabled"
          fi
          
          # Check for test data exposure
          if grep -r "test.*password\|demo.*user\|staging.*secret" --include="*.ts" --include="*.js" . 2>/dev/null | head -5; then
            echo "‚ö†Ô∏è Potential test data or credentials found"
            STAGING_SECURITY_WARNINGS="$STAGING_SECURITY_WARNINGS\n‚ö†Ô∏è Test credentials may be exposed"
          fi
          
          if [ -n "$STAGING_SECURITY_WARNINGS" ]; then
            echo "STAGING_SECURITY_WARNINGS<<EOF" >> $GITHUB_ENV
            echo -e "$STAGING_SECURITY_WARNINGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Staging security check completed"
          
      - name: Add staging security summary
        if: always()
        run: |
          echo "## üîí Staging Security Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üõ°Ô∏è Security Status" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Audit | Completed | Staging tolerates moderate issues |" >> $GITHUB_STEP_SUMMARY
          echo "| Debug Flags | Checked | Review any findings |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Data | Scanned | Ensure no sensitive data exposed |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${STAGING_SECURITY_WARNINGS:-}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è Security Warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${STAGING_SECURITY_WARNINGS}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> **Note:** Staging environment warnings are acceptable but should be reviewed." >> $GITHUB_STEP_SUMMARY
          fi

  detect-staging-failures:
    name: Detect Staging CI Failures
    runs-on: ubuntu-latest
    needs: [staging-lint-and-build, staging-security-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect staging failures with fallback
        id: staging-failure-detector
        run: |
          echo "üîç Detecting staging CI failures..."
          
          # Check if main failure detector action exists
          if [ -f ".github/actions/failure-detector/action.yml" ]; then
            echo "‚úÖ Using main failure detector action"
            echo "DETECTOR_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Main failure detector not available - using manual detection"
            echo "DETECTOR_AVAILABLE=false" >> $GITHUB_ENV
            
            # Manual failure detection for staging
            FAILED_JOBS=""
            
            if [ "${{ needs.staging-lint-and-build.result }}" == "failure" ]; then
              FAILED_JOBS="$FAILED_JOBS- staging-lint-and-build\n"
            fi
            
            if [ "${{ needs.staging-security-check.result }}" == "failure" ]; then
              FAILED_JOBS="$FAILED_JOBS- staging-security-check\n"
            fi
            
            if [ -n "$FAILED_JOBS" ]; then
              echo "‚ùå Staging failures detected:"
              echo -e "$FAILED_JOBS"
              echo "issue-created=manual" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ No staging failures detected"
              echo "issue-created=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Use main failure detector if available
        if: env.DETECTOR_AVAILABLE == 'true'
        uses: ./.github/actions/failure-detector
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          workflow-name: 'Staging CI/CD Pipeline'
          run-id: ${{ github.run_id }}
          critical-jobs: 'staging-lint-and-build,staging-security-check'
          
      - name: Add staging failure detection summary
        run: |
          echo "## üé≠ Staging Failure Detection Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** Staging CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Build | ${{ needs.staging-lint-and-build.result }} | ${{ needs.staging-lint-and-build.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | ${{ needs.staging-security-check.result }} | ${{ needs.staging-security-check.result == 'success' && '‚úÖ' || needs.staging-security-check.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${DETECTOR_AVAILABLE:-false}" == "true" ]; then
            echo "üîç **Failure detection:** Using main detector action" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîç **Failure detection:** Manual detection (fallback mode)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Staging Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Staging workflows are more permissive than production" >> $GITHUB_STEP_SUMMARY
          echo "- Warnings are acceptable but should be reviewed" >> $GITHUB_STEP_SUMMARY
          echo "- Security checks focus on major issues only" >> $GITHUB_STEP_SUMMARY